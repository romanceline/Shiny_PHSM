select(DateReport1,country,CasesTotal,DeathsTotal,ImportFlag,NewCases,NewDeaths)
cntry_ref_severity <- read.csv(paste0(dirname(rstudioapi::getSourceEditorContext()$path),'/Cntry_web_ref_severity.csv'),fileEncoding="UTF-8-BOM")
cntry_ref_severity <- cntry_ref_severity %>%
mutate(country=str_to_title(ADM0NAME))
web_scrap_severity<- cntry_ref_severity %>%
left_join(web_scrap,by=c('country'='ADM0NAME')) %>%
mutate(DateReport1=Sys.Date()) %>%
select(country,DateReport1,NewTests,Hosp_occ,ICU_occ) %>%
replace(is.na(.), '')
ComparingData<-function(ctr){
data_yesterday_ctr<-data_yesterday %>%
filter(country==ctr)
data_today_ctr<-web_scrap %>%
filter(country==ctr)
if (!is.na(data_today_ctr$TotalCases)){
if (data_yesterday_ctr$TotalCases==data_today_ctr$TotalCases){
message(paste0('Total cases for ',ctr,' has probably not been updated yet. Please update manually later today \n'))
}
if (data_yesterday_ctr$TotalDeaths==data_today_ctr$TotalDeaths){
message(paste0('Total deaths for ',ctr,' has probably not been updated yet. Please update manually later today \n'))}
if (data_today_ctr$TotalDeaths>=data_yesterday_ctr$TotalDeaths*150/100){
message(paste0('Total deaths for ',ctr,' is much higher than yesterday. Please check, there might be a typo on the website \n'))}
if (data_today_ctr$TotalCases>=data_yesterday_ctr$TotalCases*150/100){
message(paste0('Total cases for ',ctr,' is much higher than yesterday. Please check, there might be a typo on the website \n'))}
}
}
#Uncomment to try this functionnality
# listcountries_<-str_replace_all(
#   listcountries,
#   c("Russia" = "Russian Federation",
#     "CzechRepublic" = 'Czech Republic',
#     "Faroe" = 'Faroe Islands'))
# for (ctr in listcountries_){
#   ComparingData(ctr)
# }
write.csv(web_scrap_epi,paste0(folder,'/WebScraping_Epi_',format(Sys.time(), "%Y-%m-%d"),'.csv'),row.names=FALSE)
write.csv(web_scrap_severity,paste0(folder,'/WebScraping_Severity_',format(Sys.time(), "%Y-%m-%d"),'.csv'),row.names=FALSE)
path<-'https://www.sst.dk/en/english/corona-eng/status-of-the-epidemic/covid-19-updates-statistics-and-charts'
Bloc_A<-read_html(path) %>%
html_nodes('#main__content > main > article > div.o-content-block.u-grid.u-grid--space-between.u-grid--no-gutter.u-ie > div > div:nth-child(1) > div:nth-child(6) > table') %>%
html_table() %>% as.data.frame()
NewTests<-as.numeric(gsub(',','',Bloc_A[2,2]))
NewCases<-as.numeric(gsub(',','',Bloc_A[4,2]))
NewDeaths<-as.numeric(gsub(',','',Bloc_A[6,2]))
Bloc_B<-read_html(path) %>%
html_nodes('#main__content > main > article > div.o-content-block.u-grid.u-grid--space-between.u-grid--no-gutter.u-ie > div > div:nth-child(1) > div:nth-child(8) > table') %>%
html_table() %>% as.data.frame()
TotalTests<-as.numeric(gsub(',','',Bloc_B[2,2]))
TotalCases<-as.numeric(gsub(',','',Bloc_B[4,2]))
TotalDeaths<-as.numeric(gsub(',','',Bloc_B[6,2]))
Bloc_B<-read_html(path) %>%
html_nodes('#main__content > main > article > div.o-content-block.u-grid.u-grid--space-between.u-grid--no-gutter.u-ie > div > div:nth-child(1) > div:nth-child(7) > table') %>%
html_table() %>% as.data.frame()
TotalTests<-as.numeric(gsub(',','',Bloc_B[2,2]))
TotalCases<-as.numeric(gsub(',','',Bloc_B[4,2]))
TotalDeaths<-as.numeric(gsub(',','',Bloc_B[6,2]))
Bloc_C<-read_html(path) %>%
html_nodes('#main__content > main > article > div.o-content-block.u-grid.u-grid--space-between.u-grid--no-gutter.u-ie > div > div:nth-child(1) > div:nth-child(10) > table
') %>%
html_table() %>% as.data.frame()
Bloc_C<-read_html(path) %>%
html_nodes('#main__content > main > article > div.o-content-block.u-grid.u-grid--space-between.u-grid--no-gutter.u-ie > div > div:nth-child(1) > div:nth-child(9) > table
') %>%
html_table() %>% as.data.frame()
Data_Denmark<-function(){
path<-'https://www.sst.dk/en/english/corona-eng/status-of-the-epidemic/covid-19-updates-statistics-and-charts'
Bloc_A<-read_html(path) %>%
html_nodes('#main__content > main > article > div.o-content-block.u-grid.u-grid--space-between.u-grid--no-gutter.u-ie > div > div:nth-child(1) > div:nth-child(6) > table') %>%
html_table() %>% as.data.frame()
NewTests<-as.numeric(gsub(',','',Bloc_A[2,2]))
NewCases<-as.numeric(gsub(',','',Bloc_A[4,2]))
NewDeaths<-as.numeric(gsub(',','',Bloc_A[6,2]))
Bloc_B<-read_html(path) %>%
html_nodes('#main__content > main > article > div.o-content-block.u-grid.u-grid--space-between.u-grid--no-gutter.u-ie > div > div:nth-child(1) > div:nth-child(7) > table') %>%
html_table() %>% as.data.frame()
TotalTests<-as.numeric(gsub(',','',Bloc_B[2,2]))
TotalCases<-as.numeric(gsub(',','',Bloc_B[4,2]))
TotalDeaths<-as.numeric(gsub(',','',Bloc_B[6,2]))
Bloc_C<-read_html(path) %>%
html_nodes('#main__content > main > article > div.o-content-block.u-grid.u-grid--space-between.u-grid--no-gutter.u-ie > div > div:nth-child(1) > div:nth-child(9) > table
') %>%
html_table() %>% as.data.frame()
Hosp_occ<-as.numeric(gsub(',','',Bloc_C[2,2]))
ICU_occ<-as.numeric(gsub(',','',Bloc_C[3,2]))
return(data.frame(ADM0NAME='Denmark',
TotalCases=TotalCases,
NewCases=NewCases,
TotalDeaths=TotalDeaths,
NewDeaths=NewDeaths,
TotalTests=TotalTests,
NewTests=NewTests,
Hosp_occ=Hosp_occ,
ICU_occ=ICU_occ))
}
Data_Denmark()
#Cleans everything (any previously datasets, functions created,..)
rm(list = ls())
pkgs <- c('lubridate', "rvest", "readr","sjmisc","dplyr","stringr","qdapRegex","gsubfn","tidyverse", "httr", "jsonlite","readxl","yesno")
for (i in pkgs) {
if (!i %in% installed.packages()) {
install.packages(i)
}
library(i, character.only = TRUE)
}
folder<-dirname(rstudioapi::getSourceEditorContext()$path)
if (str_contains(folder,'/WebScraping')){
folder<-dirname(folder)
} else {
folder<-dirname(dirname(folder)) # move two dirs above HIM
#condition if executed from CntrImport.R, move it one more time up
if(str_contains(folder,"/HIM")){
folder<-dirname(folder)
}
}
folder<-paste0(folder,'/OutWebsitesData')
if(!dir.exists(paste0(folder))){
dir.create(paste0(folder)) #create folder for raw files
}
functions_folder<-paste0(dirname(rstudioapi::getSourceEditorContext()$path),'/DataCountries')
#source other functions
functions <- list.files(functions_folder, pattern = ".R$", recursive = TRUE)
for (i in 1:length(functions)) {
source(paste0(functions_folder,'/',functions[i]))
}
#Temporary on hold
data_yesterday<-read.csv(paste0(dirname(folder),'/',format(Sys.Date()-1,'%y%m%d'),'_qry_COVID_running_cases_country_date.CSV')) %>%
mutate(DateReport1=as.Date(parse_date_time(DateReport1, c("dmy","ymd","mdy")))) %>%
filter(DateReport1==Sys.Date()-1) %>%
mutate(ADM0NAME=str_to_title(ADM0NAME))
#Switch true= verified countries, false= all countries
exp_ready = FALSE
if(exp_ready == TRUE){
#Important to keep same spelling as in function name (one country = one word)
listcountries<-c('Georgia',
'Russia',
'Serbia',
'Slovakia',
'Kyrgystan',
'Ukraine',
'France',
'Denmark',
'Moldova',
'Romania',
'Portugal')
}else{
#Important to keep same spelling as in function name (one country = one word)
listcountries<-gsub('\\.R','',functions)
}
#General function that gets data but handles errors if needed
getdata <- function(ctr) {
out <- tryCatch(
{ print(paste('Getting data for ',ctr))
suppressWarnings(get(paste0('Data_',ctr))())
},
error=function(cond) {
message(paste("Could not read data for ",ctr,'. Please contact Celine or Roman and take data manually'))
return(data.frame(ADM0NAME=ctr,
TotalCases=NA,
NewCases=NA,
TotalDeaths=NA,
NewDeaths=NA,
NewTests=NA,
TotalTests=NA,
Hosp_occ=NA,
ICU_occ=NA))
},
finally={
print('Over')
}
)
return(out)
}
web_scrap<-data.frame()
for (ctry in listcountries){
web_scrap_<-getdata(ctry)
web_scrap<-bind_rows(web_scrap,web_scrap_)
}
#read reference Cntry_web_ref.csv
cntry_ref <- read.csv(paste0(dirname(rstudioapi::getSourceEditorContext()$path),'/Cntry_web_ref.csv'))
cntry_ref <- cntry_ref %>%
mutate(country=str_to_title(ADM0NAME))
#%>% mutate(country=if_else(country=="Czech Republic","CzechRepublic",country))
web_scrap_epi<- cntry_ref %>%
left_join(web_scrap,by=c('country'='ADM0NAME')) %>%
mutate(DateReport1=Sys.Date()) %>%
mutate(ImportFlag=if_else(!is.na(TotalCases) | !is.na(TotalDeaths) ,3,1))%>%
mutate(CasesTotal=if_else(!is.na(TotalCases),as.character(TotalCases),"")) %>%
mutate(DeathsTotal=if_else(!is.na(TotalDeaths),as.character(TotalDeaths),""))%>%
select(DateReport1,country,CasesTotal,DeathsTotal,ImportFlag,NewCases,NewDeaths)
cntry_ref_severity <- read.csv(paste0(dirname(rstudioapi::getSourceEditorContext()$path),'/Cntry_web_ref_severity.csv'),fileEncoding="UTF-8-BOM")
cntry_ref_severity <- cntry_ref_severity %>%
mutate(country=str_to_title(ADM0NAME))
web_scrap_severity<- cntry_ref_severity %>%
left_join(web_scrap,by=c('country'='ADM0NAME')) %>%
mutate(DateReport1=Sys.Date()) %>%
select(country,DateReport1,NewTests,Hosp_occ,ICU_occ) %>%
replace(is.na(.), '')
ComparingData<-function(ctr,Variable){
data_yesterday_ctr<-data_yesterday %>%
filter(ADM0NAME==ctr)
data_today_ctr<-web_scrap %>%
filter(ADM0NAME==ctr)
Variable<-all_of(Variable)
Variable_Today<-(data_today_ctr %>%  select(Variable))[1,1]
Variable_Yesterday<-(data_yesterday_ctr %>%  select(Variable))[1,1]
if(!is.na(Variable_Today)){
if(Variable_Today==Variable_Yesterday)
{message(paste0(ctr,': ',Variable,' is equal to yesterday. Website probably not yet updated. Please update manually later'))}
if(Variable=='TotalDeaths' | Variable=='TotalCases'){
if(Variable_Today<Variable_Yesterday)
{message(paste0(ctr,': ',Variable,' is lower than yesterday. Not normal. Please investigate'))}
}
}
}
QuickValidation<-function(ctr){
TotalCasesToday<-(web_scrap %>% filter(ADM0NAME==ctr) %>% select(TotalCases))[1,1]
NewCasesToday<-(web_scrap %>%
filter(ADM0NAME==ctr) %>% select(NewCases))[1,1]
TotalCasesYesterday<-(data_yesterday %>% filter(ADM0NAME==ctr) %>% select(TotalCases))[1,1]
if(!is.na(NewCasesToday) & !is.na(TotalCasesToday) & (TotalCasesToday!=TotalCasesYesterday)){
if(TotalCasesToday!=TotalCasesYesterday+NewCasesToday){
message(paste0(ctr,': Total Cases (',TotalCasesToday,') for today is not equal to Total Cases Yesterday (',
TotalCasesYesterday,') + New Cases Today (',NewCasesToday,'). Please investigate'))    }
}
TotalDeathsToday<-(web_scrap %>% filter(ADM0NAME==ctr) %>% select(TotalDeaths))[1,1]
NewDeathsToday<-(web_scrap %>%
filter(ADM0NAME==ctr) %>% select(NewDeaths))[1,1]
TotalDeathsYesterday<-(data_yesterday %>% filter(ADM0NAME==ctr) %>% select(TotalDeaths))[1,1]
if(!is.na(NewDeathsToday)&!is.na(TotalDeathsToday) & (TotalCasesToday!=TotalCasesYesterday)){
if(TotalDeathsToday!=TotalDeathsYesterday+NewDeathsToday){
message(paste0(ctr,': Total Deaths (',TotalDeathsToday,') for today is not equal to Total Deaths Yesterday (',
TotalDeathsYesterday,') + New Deaths Today (',NewDeathsToday,'). Please investigate'))
}
}
}
#Uncomment to try this functionnality
listcountries_<-str_replace_all(
listcountries,
c("Russia" = "Russian Federation",
"CzechRepublic" = 'Czech Republic',
"Faroe" = 'Faroe Islands'))
for (ctr in listcountries_){
ComparingData(ctr,'NewCases')
ComparingData(ctr,'TotalCases')
ComparingData(ctr,'NewDeaths')
ComparingData(ctr,'TotalDeaths')
QuickValidation(ctr)
}
write.csv(web_scrap_epi,paste0(folder,'/WebScraping_Epi_',format(Sys.time(), "%Y-%m-%d"),'.csv'),row.names=FALSE)
write.csv(web_scrap_severity,paste0(folder,'/WebScraping_Severity_',format(Sys.time(), "%Y-%m-%d"),'.csv'),row.names=FALSE)
#Kirgizstan
Data_Kyrgystan<-function(){
path<-'http://www.med.kg/index.php/en/'
NewCases_A<-read_html(path) %>%
html_nodes('#sp-slide > div > div > div > div > div:nth-child(2) > table > tbody > tr:nth-child(3) > td:nth-child(1) > p > span') %>%
html_text() %>% as.numeric()
NewCases_B<-read_html(path) %>%
html_nodes('#sp-slide > div > div > div > div > div:nth-child(2) > table > tbody > tr:nth-child(3) > td:nth-child(2) > p > span > span > b') %>%
html_text() %>% as.numeric()
NewCases<-NewCases_A+NewCases_B
TotalCases_A<-read_html(path) %>%
html_nodes('#sp-slide > div > div > div > div > div:nth-child(2) > table > tbody > tr:nth-child(3) > td:nth-child(3) > p > span > span > b') %>%
html_text() %>% as.numeric()
TotalCases_B<-read_html(path) %>%
html_nodes('#sp-slide > div > div > div > div > div:nth-child(2) > table > tbody > tr:nth-child(3) > td:nth-child(4) > p > span > strong > span') %>%
html_text() %>% as.numeric()
TotalCases<-TotalCases_A+TotalCases_B
TotalDeaths_A<-read_html(path) %>%
html_nodes('#sp-slide > div > div > div > div > div:nth-child(2) > table > tbody > tr:nth-child(3) > td:nth-child(7) > p > span > span > b') %>%
html_text() %>% as.numeric()
TotalDeaths_B<-read_html(path) %>%
html_nodes('#sp-slide > div > div > div > div > div:nth-child(2) > table > tbody > tr:nth-child(3) > td:nth-child(8) > p > span > strong') %>%
html_text() %>% as.numeric()
TotalDeaths<-TotalDeaths_A+TotalDeaths_B
return(data.frame(ADM0NAME='Kyrgyzstan',
NewCases=NewCases,
TotalCases=TotalCases,
TotalDeaths=TotalDeaths))
}
Data_Kyrgyzstan
#Cleans everything (any previously datasets, functions created,..)
rm(list = ls())
pkgs <- c('lubridate', "rvest", "readr","sjmisc","dplyr","stringr","qdapRegex","gsubfn","tidyverse", "httr", "jsonlite","readxl","yesno")
for (i in pkgs) {
if (!i %in% installed.packages()) {
install.packages(i)
}
library(i, character.only = TRUE)
}
folder<-dirname(rstudioapi::getSourceEditorContext()$path)
if (str_contains(folder,'/WebScraping')){
folder<-dirname(folder)
} else {
folder<-dirname(dirname(folder)) # move two dirs above HIM
#condition if executed from CntrImport.R, move it one more time up
if(str_contains(folder,"/HIM")){
folder<-dirname(folder)
}
}
folder<-paste0(folder,'/OutWebsitesData')
if(!dir.exists(paste0(folder))){
dir.create(paste0(folder)) #create folder for raw files
}
functions_folder<-paste0(dirname(rstudioapi::getSourceEditorContext()$path),'/DataCountries')
#source other functions
functions <- list.files(functions_folder, pattern = ".R$", recursive = TRUE)
for (i in 1:length(functions)) {
source(paste0(functions_folder,'/',functions[i]))
}
#Temporary on hold
data_yesterday<-read.csv(paste0(dirname(folder),'/',format(Sys.Date()-1,'%y%m%d'),'_qry_COVID_running_cases_country_date.CSV')) %>%
mutate(DateReport1=as.Date(parse_date_time(DateReport1, c("dmy","ymd","mdy")))) %>%
filter(DateReport1==Sys.Date()-1) %>%
mutate(ADM0NAME=str_to_title(ADM0NAME))
#Switch true= verified countries, false= all countries
exp_ready = FALSE
if(exp_ready == TRUE){
#Important to keep same spelling as in function name (one country = one word)
listcountries<-c('Georgia',
'Russia',
'Serbia',
'Slovakia',
'Kyrgystan',
'Ukraine',
'France',
'Denmark',
'Moldova',
'Romania',
'Portugal')
}else{
#Important to keep same spelling as in function name (one country = one word)
listcountries<-gsub('\\.R','',functions)
}
#General function that gets data but handles errors if needed
getdata <- function(ctr) {
out <- tryCatch(
{ print(paste('Getting data for ',ctr))
suppressWarnings(get(paste0('Data_',ctr))())
},
error=function(cond) {
message(paste("Could not read data for ",ctr,'. Please contact Celine or Roman and take data manually'))
return(data.frame(ADM0NAME=ctr,
TotalCases=NA,
NewCases=NA,
TotalDeaths=NA,
NewDeaths=NA,
NewTests=NA,
TotalTests=NA,
Hosp_occ=NA,
ICU_occ=NA))
},
finally={
print('Over')
}
)
return(out)
}
web_scrap<-data.frame()
for (ctry in listcountries){
web_scrap_<-getdata(ctry)
web_scrap<-bind_rows(web_scrap,web_scrap_)
}
#read reference Cntry_web_ref.csv
cntry_ref <- read.csv(paste0(dirname(rstudioapi::getSourceEditorContext()$path),'/Cntry_web_ref.csv'))
cntry_ref <- cntry_ref %>%
mutate(country=str_to_title(ADM0NAME))
#%>% mutate(country=if_else(country=="Czech Republic","CzechRepublic",country))
web_scrap_epi<- cntry_ref %>%
left_join(web_scrap,by=c('country'='ADM0NAME')) %>%
mutate(DateReport1=Sys.Date()) %>%
mutate(ImportFlag=if_else(!is.na(TotalCases) | !is.na(TotalDeaths) ,3,1))%>%
mutate(CasesTotal=if_else(!is.na(TotalCases),as.character(TotalCases),"")) %>%
mutate(DeathsTotal=if_else(!is.na(TotalDeaths),as.character(TotalDeaths),""))%>%
select(DateReport1,country,CasesTotal,DeathsTotal,ImportFlag,NewCases,NewDeaths)
cntry_ref_severity <- read.csv(paste0(dirname(rstudioapi::getSourceEditorContext()$path),'/Cntry_web_ref_severity.csv'),fileEncoding="UTF-8-BOM")
cntry_ref_severity <- cntry_ref_severity %>%
mutate(country=str_to_title(ADM0NAME))
web_scrap_severity<- cntry_ref_severity %>%
left_join(web_scrap,by=c('country'='ADM0NAME')) %>%
mutate(DateReport1=Sys.Date()) %>%
select(country,DateReport1,NewTests,Hosp_occ,ICU_occ) %>%
replace(is.na(.), '')
ComparingData<-function(ctr,Variable){
data_yesterday_ctr<-data_yesterday %>%
filter(ADM0NAME==ctr)
data_today_ctr<-web_scrap %>%
filter(ADM0NAME==ctr)
Variable<-all_of(Variable)
Variable_Today<-(data_today_ctr %>%  select(Variable))[1,1]
Variable_Yesterday<-(data_yesterday_ctr %>%  select(Variable))[1,1]
if(!is.na(Variable_Today)){
if(Variable_Today==Variable_Yesterday)
{message(paste0(ctr,': ',Variable,' is equal to yesterday. Website probably not yet updated. Please update manually later'))}
if(Variable=='TotalDeaths' | Variable=='TotalCases'){
if(Variable_Today<Variable_Yesterday)
{message(paste0(ctr,': ',Variable,' is lower than yesterday. Not normal. Please investigate'))}
}
}
}
QuickValidation<-function(ctr){
TotalCasesToday<-(web_scrap %>% filter(ADM0NAME==ctr) %>% select(TotalCases))[1,1]
NewCasesToday<-(web_scrap %>%
filter(ADM0NAME==ctr) %>% select(NewCases))[1,1]
TotalCasesYesterday<-(data_yesterday %>% filter(ADM0NAME==ctr) %>% select(TotalCases))[1,1]
if(!is.na(NewCasesToday) & !is.na(TotalCasesToday) & (TotalCasesToday!=TotalCasesYesterday)){
if(TotalCasesToday!=TotalCasesYesterday+NewCasesToday){
message(paste0(ctr,': Total Cases (',TotalCasesToday,') for today is not equal to Total Cases Yesterday (',
TotalCasesYesterday,') + New Cases Today (',NewCasesToday,'). Please investigate'))    }
}
TotalDeathsToday<-(web_scrap %>% filter(ADM0NAME==ctr) %>% select(TotalDeaths))[1,1]
NewDeathsToday<-(web_scrap %>%
filter(ADM0NAME==ctr) %>% select(NewDeaths))[1,1]
TotalDeathsYesterday<-(data_yesterday %>% filter(ADM0NAME==ctr) %>% select(TotalDeaths))[1,1]
if(!is.na(NewDeathsToday)&!is.na(TotalDeathsToday) & (TotalCasesToday!=TotalCasesYesterday)){
if(TotalDeathsToday!=TotalDeathsYesterday+NewDeathsToday){
message(paste0(ctr,': Total Deaths (',TotalDeathsToday,') for today is not equal to Total Deaths Yesterday (',
TotalDeathsYesterday,') + New Deaths Today (',NewDeathsToday,'). Please investigate'))
}
}
}
#Uncomment to try this functionnality
listcountries_<-str_replace_all(
listcountries,
c("Russia" = "Russian Federation",
"CzechRepublic" = 'Czech Republic',
"Faroe" = 'Faroe Islands'))
for (ctr in listcountries_){
ComparingData(ctr,'NewCases')
ComparingData(ctr,'TotalCases')
ComparingData(ctr,'NewDeaths')
ComparingData(ctr,'TotalDeaths')
QuickValidation(ctr)
}
write.csv(web_scrap_epi,paste0(folder,'/WebScraping_Epi_',format(Sys.time(), "%Y-%m-%d"),'.csv'),row.names=FALSE)
write.csv(web_scrap_severity,paste0(folder,'/WebScraping_Severity_',format(Sys.time(), "%Y-%m-%d"),'.csv'),row.names=FALSE)
Data_Moldova()
listcountries_
View(web_scrap)
### LOAD PACKAGES
#First time install of the required functions, or update if changed
#devtools::install_github("whocov/phifunc", auth_token = "7fb165f058a1f42c930f75328578253e08028453", subdir = "phifunc", dep = FALSE)
PackagesToInstall<-c('AzureAuth', 'extrafont', 'EpiEstim', 'formattable', 'ggalt', 'ggforce', 'gghighlight', 'hrbrthemes', 'incidence', 'outbreaks', 'sparkline')
for (i in PackagesToInstall) {
print(i)
if (!i %in% installed.packages())
{install.packages(i)}
library(i, character.only = TRUE)
}
library(tidyverse) # general R utilities for data transformation/plotting
library(httr) # for working with APIs
library(jsonlite) #for working with APIs
library(ISOweek) # deals with ISO week formatting
library(phifunc) #  for pulling aggregate data from xMart
library(openxlsx) # creates output in Excel
#-------------------------------------------------------------------------------------------------------
### DEFINE REPORTING WEEK
reporting.week <- str_replace(ISOweek(Sys.Date() - 6), "W", "")
previous.week <- str_replace(ISOweek(Sys.Date() - 13), "W", "")
reporting.week
agg_data1 <- pull_euro_weekly()
View(agg_data1)
agg_comb <- pull_euro_weekly_comb() %>%
mutate(report_year=ifelse(report_year==2021 & report_week==53,2020,report_year))
agg_comb <- pull_euro_weekly_comb()
View(agg_comb)
agg_comb <- pull_euro_weekly_comb() %>%
mutate(report_year=ifelse(report_year==2021 & report_week==53,2020,report_year))
# Line used only during transition 2020-2021 cause messed up (Week 53 for 2021??)
# Check again next week
# merge the data
agg_final <- agg_data1 %>%
filter(!(report_country %in% unique(agg_comb$report_country))) %>%
bind_rows(., agg_comb)
agg_final = agg_final %>%
filter(age_group == "All")
agg_final = agg_final %>%
mutate(year_week = ifelse(report_week %in% 1:9,
paste0(agg_final$report_year,"-0",agg_final$report_week),
paste0(agg_final$report_year,"-",agg_final$report_week)))
View(agg_final)
agg_final <- agg_data1 %>%
filter(!(report_country %in% unique(agg_comb$report_country))) %>%
bind_rows(., agg_comb)
#----------------------------------------------------------------------------------------------------
### DATA MANIPULATION
# filter out age groups
agg_final = agg_final %>%
filter(age_group == "All")
View(agg_final)
View(agg_comb)
test<-agg_comb %>% filter(age_group='All')
test<-agg_comb %>% filter(age_group=='All')
View(test)
agg_comb <- pull_euro_weekly_comb()
test<-agg_comb %>% filter(age_group=='All')
View(test)
agg_comb <- pull_euro_weekly_comb() %>%
mutate(report_year=ifelse(report_year==2021 & report_week==53,2020,report_year))
agg_final <- agg_data1 %>%
filter(!(report_country %in% unique(agg_comb$report_country))) %>%
bind_rows(., agg_comb)
agg_final = agg_final %>%
filter(age_group == "All")
# format week
agg_final = agg_final %>%
mutate(year_week = ifelse(report_week %in% 1:9,
paste0(agg_final$report_year,"-0",agg_final$report_week),
paste0(agg_final$report_year,"-",agg_final$report_week)))
agg_final = agg_final %>%
filter(year_week %in% reporting.week | year_week %in% previous.week)
agg_final = agg_final %>%
select(report_country, year_week, hospitalised, tested_all, ventilated)

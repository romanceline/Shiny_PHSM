}
if (CasesOrDeaths=='Deaths'){
ttl<-'Daily Deaths \n '
}
Points<-Dataset %>% filter(!is.na(Narrative))
if (RealValues=='Yes'){
MaxY<-max(pretty(max((Dataset %>% filter(!is.na(RealValue)))$RealValue)))
}
if(!is.null(country_selected) & !is.null(Date_selected)){
Point_selected<-Points %>% filter(ADM0NAME==country_selected,DateReport1==Date_selected)}
if (RealValues=='No'){
MaxY<-max(pretty(max((Dataset %>% filter(!is.na(SplineValue)))$SplineValue)))
}
if (TimeScale=='Absolute'){
plot<-ggplot(Dataset,aes(x=X_axis,y=SplineValue,group=ADM0NAME,color=ADM0NAME))+
geom_line(size=0.7)+
geom_point(data=Points,size=3,alpha=alf)+
scale_y_continuous(ttl,position='left',breaks=seq(0,MaxY,MaxY/5),labels=seq(0,MaxY,MaxY/5),limits=c(NA,MaxY))+
theme_minimal()+
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.title.y.right=element_blank(),
legend.title=element_text(size=9,face='bold',hjust=0.5),plot.margin = unit(c(1,5,1,5),"lines"))+
coord_cartesian(clip = 'off')+
scale_color_manual('Country',breaks=sort(c(unique(Dataset$ADM0NAME))),values=c(MyPalette[1:length(unique(Dataset$ADM0NAME))]))+
scale_x_date(date_breaks = "15 days",date_labels =  "%d-%b",limits=c(StartDate,EndDate+1))
if (!is.null(country_selected) & !is.null(Date_selected)){
plot<-plot+geom_point(data=Point_selected,shape=1,size=5,alpha=alf,color='black')}
}
if (TimeScale=='Relative'){
RelStartDate<-min(Dataset$Days)
RelMaxDate<-max(Dataset$Days)
plot<-ggplot(Dataset)+
geom_line(aes(x=X_axis,y=SplineValue,group=ADM0NAME,color='First implementation of \nthe measure'),linetype=2,size=0.7,show.legend=TRUE)+
geom_line(size=0.7,aes(x=X_axis,y=SplineValue,group=ADM0NAME,color=ADM0NAME))+
geom_vline(xintercept = 0, linetype="dashed",show.legend = TRUE)+
geom_point(data=Points,size=3,aes(x=X_axis,y=SplineValue,group=ADM0NAME,color=ADM0NAME),alpha=alf)+
scale_y_continuous(ttl,position='left',breaks=seq(0,MaxY,MaxY/5),labels=seq(0,MaxY,MaxY/5),limits=c(NA,MaxY))+
scale_x_continuous(breaks=c(0,seq(round(RelStartDate/10)*10,RelMaxDate+5,20)),limits=c(RelStartDate,RelMaxDate+1))+
theme_minimal()+
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.title.y.right=element_blank(),
legend.title=element_text(size=9,face='bold',hjust=0.5),plot.margin = unit(c(1,5,1,5),"lines"))+
coord_cartesian(clip = 'off')+
scale_color_manual('Country',breaks=c(sort(c(unique(Dataset$ADM0NAME))),'First implementation of \nthe measure'),values=c(MyPalette[1:length(unique(Dataset$ADM0NAME))],'black'),guide="legend")+
guides(colour=guide_legend(override.aes=list(
linetype = c(rep("solid",length(unique(Dataset$ADM0NAME))),'dashed'),
shape=c(rep(NA,length(unique(Dataset$ADM0NAME))),NA),
size=c(rep(1,length(unique(Dataset$ADM0NAME))),0.5))))
if (!is.null(country_selected) & !is.null(Date_selected)){
plot<-plot+geom_point(data=Point_selected,aes(x=X_axis,y=SplineValue),shape=1,size=5,alpha=alf,color='black')}
}
if(RealValues=="Yes")
{plot<-plot+geom_point(aes(x=X_axis,y=RealValue,color=ADM0NAME),shape=3,alpha=0.3,size=1)}
if(Log=="True"){
plot<-plot+scale_y_continuous(ttl,labels=function(x) round(10^x),position='left')}
return(plot)
}
StartDates<-function(ListCountries){
AllDates<-(GlobalDataset_ %>% filter(ADM0NAME %in% ListCountries))$DateReport1
Value<-min(AllDates)
return(Value)
}
maxDates<-function(ListCountries){
AllDates<-(GlobalDataset_ %>% filter(ADM0NAME %in% ListCountries))$DateReport1
Value<-max(AllDates)
return(Value)
}
Top3_14DaysIncidence<-function() {
CurrentDate<-max(GlobalDataset_$DateReport1)
FourteenDaysIncidence_Dataset_ <- data.frame()
for (ctr in unique(GlobalDataset_$ADM0NAME)){
FourteenDaysIncidence_Dataset<-data.frame(nrow=1)
FourteenDaysIncidence_Dataset$ADM0NAME[1]<-as.character(ctr)
FourteenDaysIncidence_Dataset$Cumul14Days[1]<-((GlobalDataset_ %>% filter(ADM0NAME==ctr & DateReport1==CurrentDate))$TotalCases - (GlobalDataset_ %>% filter(ADM0NAME==ctr & DateReport1==CurrentDate-14))$TotalCases)
FourteenDaysIncidence_Dataset_<-bind_rows(FourteenDaysIncidence_Dataset,FourteenDaysIncidence_Dataset_)
}
FourteenDaysIncidence_Dataset_ <- FourteenDaysIncidence_Dataset_ %>%
left_join(PopulationDataset,by='ADM0NAME') %>%
mutate(Incidence=Cumul14Days/UNPOP2019*100000) %>% filter(ADM0NAME %in% unique(GlobalDataset_$ADM0NAME)) %>%
arrange(desc(Incidence)) %>% filter(ADM0NAME %in% unique(GlobalDataset_$ADM0NAME)) %>% top_n(3)
return(FourteenDaysIncidence_Dataset_$ADM0NAME)
}
Top3_14DaysIncidence<-function() {
CurrentDate<-max(GlobalDataset_$DateReport1)
FourteenDaysIncidence_Dataset_ <- data.frame()
for (ctr in unique(GlobalDataset_$ADM0NAME)){
CountryDataset<-GlobalDataset_ %>% filter(ADM0NAME==ctr) %>% arrange(DateReport1)
CountryDataset<-CountryDataset %>% mutate(Cases14=TotalCases-lag(TotalCases,14))
FourteenDaysIncidence_Dataset_<-bind_rows(CountryDataset,FourteenDaysIncidence_Dataset_)
}
FourteenDaysIncidence_Dataset_ <- FourteenDaysIncidence_Dataset_ %>%
filter(DateReport1==CurrentDate) %>%
left_join(PopulationDataset,by='ADM0NAME') %>%
mutate(Incidence=Cases14/UNPOP2019*100000) %>% filter(ADM0NAME %in% unique(GlobalDataset_$ADM0NAME)) %>%
arrange(desc(Incidence)) %>% filter(ADM0NAME %in% unique(GlobalDataset_$ADM0NAME)) %>% top_n(3)
return(FourteenDaysIncidence_Dataset_$ADM0NAME)
}
PlotSeverity<-function(ListCountries,Log,CasesOrDeaths,country_hovered,Date_hovered,StartDate,EndDate,Measure,TimeScale,RealValues){
Dataset<-Dataset_ToPlot(ListCountries,Log,CasesOrDeaths,StartDate,EndDate,Measure,TimeScale)
if (RealValues=='Yes' & Log =='False'){
MaxValue<-max(pretty(max((Dataset %>% filter(!is.na(RealValue)))$RealValue)))
}
if (RealValues=='No' & Log =='False'){
MaxValue<-max(pretty(max((Dataset %>% filter(!is.na(SplineValue)))$SplineValue)))
}
if (RealValues=='Yes' & Log =='True'){
MaxValue<-10^(max(pretty(max((Dataset %>% filter(!is.na(RealValue)))$RealValue))))
}
if (RealValues=='No' & Log =='True'){
MaxValue<-10^(max(pretty(max((Dataset %>% filter(!is.na(SplineValue)))$SplineValue))))
}
ttl<-case_when(Measure=='Schools'~ 'Schools Measures \nSeverity',
Measure=='Gatherings'~ 'Gatherings Measures \nSeverity',
Measure=='Movements'~ 'Movements Measures \nSeverity',
Measure=='Borders' ~ 'Int. Travel Measures \nSeverity',
Measure=='Businesses' ~ 'Businesses Measures \nSeverity',
Measure=='Masks' ~ 'Masks Measures \nSeverity',
Measure=='PublicTransport' ~ 'Public Transports \nSeverity',
Measure=='All' ~ 'PHSM Severity \n')
if (TimeScale=='Absolute'){
plot_timeline<-ggplot(Dataset,aes(x=X_axis,y=MaxValue,fill=ADM0NAME))+
geom_raster(stat='identity',position='stack',width=1,aes(alpha=Index/100))+theme(axis.ticks.y=element_blank())+
scale_fill_manual('Country',breaks=sort(unique(Dataset$ADM0NAME)),values=c(MyPalette[1:length(unique(Dataset$ADM0NAME))]))+
scale_color_manual('Country',breaks=sort(unique(Dataset$ADM0NAME)))+
scale_alpha_continuous(range=c(0,1),breaks=c(0,100))+
theme_minimal()+
theme(axis.title.x=element_blank(),axis.text.y=element_text(color='white'),axis.text.x=element_text(angle = 90),axis.ticks.y=element_blank(),plot.margin = unit(c(1,5,1,5),"lines"))+
scale_x_date(date_breaks = "15 days",date_labels =  "%d-%b",limits=c(StartDate,EndDate+1))+
scale_y_continuous(ttl,breaks=MaxValue)+
coord_cartesian(clip = 'off')+
annotate("text",x=EndDate+1,y=seq(MaxValue*length(unique(Dataset$ADM0NAME))-MaxValue/2,MaxValue/2,-MaxValue),label=sort(unique(Dataset$ADM0NAME)),color=c(MyPalette[1:length(unique(Dataset$ADM0NAME))]),hjust=0,)+
guides(fill=FALSE,alpha=FALSE)
if(!is.null(Date_hovered)){
DatasetToHighlight<-Dataset %>% filter(DateReport1==Date_hovered) %>% mutate(value=if_else(ADM0NAME==country_hovered,100,0))
DatasetToHighlight<-DatasetToHighlight %>% arrange(desc(ADM0NAME))
plot_timeline<-plot_timeline+
geom_bar(data=DatasetToHighlight,stat='identity',position = 'stack',aes(alpha=value/100),width=1,fill='black',color=alpha('black',0))}
}
if (TimeScale=='Relative'){
AllDays<-(Dataset %>% filter(!(is.na(Days))))$Days
RelStartDate<-min(AllDays)
RelMaxDate<-max(AllDays)
Narratives<-Dataset %>% select(Days,ADM0NAME,DateReport1,Narrative,RealValue,SplineValue,X_axis)
Dataset<-Dataset %>% select(-c(DateReport1,Narrative,RealValue,SplineValue,X_axis)) %>% pivot_wider(names_from = 'Days',values_from='Index') %>%
replace(., is.na(.), 0) %>%
pivot_longer(cols=-c(1)) %>% rename(Days=name) %>% mutate(Days=as.numeric(Days)) %>% select(ADM0NAME,Days,Index=value) %>%
left_join(Narratives,by=c('ADM0NAME'='ADM0NAME','Days'='Days')) %>% mutate(X_axis=Days)
plot_timeline<-ggplot(Dataset,aes(x=X_axis,y=MaxValue,fill=ADM0NAME))+
geom_raster(stat='identity',position='stack',width=1,aes(alpha=Index/100))+theme(axis.ticks.y=element_blank())+
scale_fill_manual('Country',breaks=sort(unique(Dataset$ADM0NAME)),values=c(MyPalette[1:length(unique(Dataset$ADM0NAME))]))+
scale_color_manual('Country',breaks=sort(unique(Dataset$ADM0NAME)))+
scale_alpha_continuous(range=c(0,1))+
theme_minimal()+
scale_x_continuous(breaks=c(0,seq(round(RelStartDate/10)*10,RelMaxDate+5,20)),limits=c(RelStartDate,RelMaxDate+1))+
scale_y_continuous(ttl,breaks=MaxValue)+
coord_cartesian(clip = 'off')+
theme(axis.title.x=element_blank(),axis.text.y=element_text(color='white'),axis.ticks.y=element_blank(),plot.margin = unit(c(1,5,1,5),"lines"))+
annotate("text",x=RelMaxDate+1,y=seq(MaxValue*length(unique(Dataset$ADM0NAME))-MaxValue/2,MaxValue/2,-MaxValue),label=sort(unique(Dataset$ADM0NAME)),color=c(MyPalette[1:length(unique(Dataset$ADM0NAME))]),hjust=0,)+
guides(fill=FALSE,alpha=FALSE)
if(!is.null(Date_hovered)){
DaysHovered<-(Dataset %>% filter(DateReport1==Date_hovered,ADM0NAME==country_hovered))$Days
DatasetToHighlight<-Dataset %>% filter(Days==DaysHovered) %>% mutate(value=if_else(ADM0NAME==country_hovered,100,0))
DatasetToHighlight<-DatasetToHighlight %>% arrange(desc(ADM0NAME))
plot_timeline<-plot_timeline+
geom_bar(data=DatasetToHighlight,stat='identity',position = 'stack',aes(alpha=value/100),width=1,fill='black',color=alpha('black',0))}
}
return(plot_timeline)
}
ListCountries<-c('Belgium','France')
Log<-'False'
CasesOrDeaths<-'Cases'
country_hovered<-'France'
StartDate<-as.Date('2020-04-01')
EndDate<-as.Date('2021-02-01')
Measure<-
Measure<-'All'
TimeScale<-'Absolute'
RealValues<-'Yes'
PlotSeverity(ListCountries,Log,CasesOrDeaths,country_hovered,Date_hovered,StartDate,EndDate,Measure,TimeScale,RealValues)
Dataset_ToPlot(ListCountries,Log,CasesOrDeaths,StartDate,EndDate,Measure,TimeScale)
if (CasesOrDeaths=='Cases' & Log=='False'){
Dataset<-Dataset_Cases_Normal
}
if (CasesOrDeaths=='Cases' & Log=='True'){
Dataset<-Dataset_Cases_Log
}
if (CasesOrDeaths=='Deaths' & Log=='False'){
Dataset<-Dataset_Deaths_Normal
}
if (CasesOrDeaths=='Deaths' & Log=='True'){
Dataset<-Dataset_Deaths_Log
}
Dataset_Cases_Normal
Dataset<-Dataset %>% filter(ADM0NAME %in% ListCountries) %>%
filter(DateReport1>=StartDate,DateReport1<=EndDate)
if (Measure=='Schools'){
Dataset<-Dataset %>% select(ADM0NAME,DateReport1,Index=Schools,Days=Days_Schools,Narrative=Narrative_Schools,RealValue,SplineValue)
}
if (Measure=='Masks'){
Dataset<-Dataset %>% select(ADM0NAME,DateReport1,Index=Masks,Days=Days_Masks,Narrative=Narrative_Masks,RealValue,SplineValue)
}
if (Measure=='Businesses'){
Dataset<-Dataset %>% select(ADM0NAME,DateReport1,Index=Businesses,Days=Days_Businesses,Narrative=Narrative_Businesses,RealValue,SplineValue)
}
if (Measure=='Borders'){
Dataset<-Dataset %>% select(ADM0NAME,DateReport1,Index=Borders,Days=Days_Borders,Narrative=Narrative_Borders,RealValue,SplineValue)
}
if (Measure=='Movements'){
Dataset<-Dataset %>% select(ADM0NAME,DateReport1,Index=Movements,Days=Days_Movements,Narrative=Narrative_Movements,RealValue,SplineValue)
}
if (Measure=='Gatherings'){
Dataset<-Dataset %>% select(ADM0NAME,DateReport1,Index=Gatherings,Days=Days_Gatherings,Narrative=Narrative_Gatherings,RealValue,SplineValue)
}
if (Measure=='PublicTransport'){
Dataset<-Dataset %>% select(ADM0NAME,DateReport1,Index=PublicTransport,Days=Days_PublicTransport,Narrative=Narrative_PublicTransport,RealValue,SplineValue)
}
if (Measure=='All'){
Dataset<-Dataset %>% select(ADM0NAME,DateReport1,Index=GlobalIndex,Days=Days_All,Narrative=Narrative_All,RealValue,SplineValue)
}
if(TimeScale=='Absolute'){
Dataset<-Dataset %>% mutate(X_axis=DateReport1)}
if(TimeScale=='Relative'){
Dataset<-Dataset %>% mutate(X_axis=Days)}
Dataset_ToPlot<-function(ListCountries,Log,CasesOrDeaths,StartDate,EndDate,Measure,TimeScale){
if (CasesOrDeaths=='Cases' & Log=='False'){
Dataset<-Dataset_Cases_Normal
}
if (CasesOrDeaths=='Cases' & Log=='True'){
Dataset<-Dataset_Cases_Log
}
if (CasesOrDeaths=='Deaths' & Log=='False'){
Dataset<-Dataset_Deaths_Normal
}
if (CasesOrDeaths=='Deaths' & Log=='True'){
Dataset<-Dataset_Deaths_Log
}
Dataset<-Dataset %>% filter(ADM0NAME %in% ListCountries) %>%
filter(DateReport1>=StartDate,DateReport1<=EndDate)
if (Measure=='Schools'){
Dataset<-Dataset %>% select(ADM0NAME,DateReport1,Index=Schools,Days=Days_Schools,Narrative=Narrative_Schools,RealValue,SplineValue)
}
if (Measure=='Masks'){
Dataset<-Dataset %>% select(ADM0NAME,DateReport1,Index=Masks,Days=Days_Masks,Narrative=Narrative_Masks,RealValue,SplineValue)
}
if (Measure=='Businesses'){
Dataset<-Dataset %>% select(ADM0NAME,DateReport1,Index=Businesses,Days=Days_Businesses,Narrative=Narrative_Businesses,RealValue,SplineValue)
}
if (Measure=='Borders'){
Dataset<-Dataset %>% select(ADM0NAME,DateReport1,Index=Borders,Days=Days_Borders,Narrative=Narrative_Borders,RealValue,SplineValue)
}
if (Measure=='Movements'){
Dataset<-Dataset %>% select(ADM0NAME,DateReport1,Index=Movements,Days=Days_Movements,Narrative=Narrative_Movements,RealValue,SplineValue)
}
if (Measure=='Gatherings'){
Dataset<-Dataset %>% select(ADM0NAME,DateReport1,Index=Gatherings,Days=Days_Gatherings,Narrative=Narrative_Gatherings,RealValue,SplineValue)
}
if (Measure=='PublicTransport'){
Dataset<-Dataset %>% select(ADM0NAME,DateReport1,Index=PublicTransport,Days=Days_PublicTransport,Narrative=Narrative_PublicTransport,RealValue,SplineValue)
}
if (Measure=='All'){
Dataset<-Dataset %>% select(ADM0NAME,DateReport1,Index=GlobalIndex,Days=Days_All,Narrative=Narrative_All,RealValue,SplineValue)
}
if(TimeScale=='Absolute'){
Dataset<-Dataset %>% mutate(X_axis=DateReport1)}
if(TimeScale=='Relative'){
Dataset<-Dataset %>% mutate(X_axis=Days)}
return(Dataset)
}
Dataset_ToPlot(ListCountries,Log,CasesOrDeaths,StartDate,EndDate,Measure,TimeScale)
Log
CasesOrDeaths
EndDate
Measure
TimeScale
ListCountries
ListCountries<-c('Bangladesh','India')
PlotSeverity(ListCountries,Log,CasesOrDeaths,country_hovered,Date_hovered,StartDate,EndDate,Measure,TimeScale,RealValues)
Date_hovered<-as.Date('2020-05-30')
PlotSeverity(ListCountries,Log,CasesOrDeaths,country_hovered,Date_hovered,StartDate,EndDate,Measure,TimeScale,RealValues)
PlotSeverity<-function(ListCountries,Log,CasesOrDeaths,country_hovered,Date_hovered,StartDate,EndDate,Measure,TimeScale,RealValues){
Dataset<-Dataset_ToPlot(ListCountries,Log,CasesOrDeaths,StartDate,EndDate,Measure,TimeScale)
if (RealValues=='Yes' & Log =='False'){
MaxValue<-max(pretty(max((Dataset %>% filter(!is.na(RealValue)))$RealValue)))
}
if (RealValues=='No' & Log =='False'){
MaxValue<-max(pretty(max((Dataset %>% filter(!is.na(SplineValue)))$SplineValue)))
}
if (RealValues=='Yes' & Log =='True'){
MaxValue<-10^(max(pretty(max((Dataset %>% filter(!is.na(RealValue)))$RealValue))))
}
if (RealValues=='No' & Log =='True'){
MaxValue<-10^(max(pretty(max((Dataset %>% filter(!is.na(SplineValue)))$SplineValue))))
}
ttl<-case_when(Measure=='Schools'~ 'Schools Measures \nSeverity',
Measure=='Gatherings'~ 'Gatherings Measures \nSeverity',
Measure=='Movements'~ 'Movements Measures \nSeverity',
Measure=='Borders' ~ 'Int. Travel Measures \nSeverity',
Measure=='Businesses' ~ 'Businesses Measures \nSeverity',
Measure=='Masks' ~ 'Masks Measures \nSeverity',
Measure=='PublicTransport' ~ 'Public Transports \nSeverity',
Measure=='All' ~ 'PHSM Severity \n')
if (TimeScale=='Absolute'){
plot_timeline<-ggplot(Dataset,aes(x=X_axis,y=MaxValue,fill=ADM0NAME))+
geom_raster(stat='identity',position='stack',width=1,aes(alpha=Index/100))+theme(axis.ticks.y=element_blank())+
scale_fill_manual('Country',breaks=sort(unique(Dataset$ADM0NAME)),values=c(MyPalette[1:length(unique(Dataset$ADM0NAME))]))+
scale_color_manual('Country',breaks=sort(unique(Dataset$ADM0NAME)))+
scale_alpha_continuous(range=c(0,1),breaks=c(0,100))+
theme_minimal()+
theme(axis.title.x=element_blank(),axis.text.y=element_text(color='white'),axis.text.x=element_text(angle = 90),axis.ticks.y=element_blank(),plot.margin = unit(c(1,5,1,5),"lines"))+
scale_x_date(date_breaks = "15 days",date_labels =  "%d-%b",limits=c(StartDate,EndDate+1))+
scale_y_continuous(ttl,breaks=MaxValue)+
coord_cartesian(clip = 'off')+
annotate("text",size = 1.5,x=EndDate+1,y=seq(MaxValue*length(unique(Dataset$ADM0NAME))-MaxValue/2,MaxValue/2,-MaxValue),label=sort(unique(Dataset$ADM0NAME)),color=c(MyPalette[1:length(unique(Dataset$ADM0NAME))]),hjust=0,)+
guides(fill=FALSE,alpha=FALSE)
if(!is.null(Date_hovered)){
DatasetToHighlight<-Dataset %>% filter(DateReport1==Date_hovered) %>% mutate(value=if_else(ADM0NAME==country_hovered,100,0))
DatasetToHighlight<-DatasetToHighlight %>% arrange(desc(ADM0NAME))
plot_timeline<-plot_timeline+
geom_bar(data=DatasetToHighlight,stat='identity',position = 'stack',aes(alpha=value/100),width=1,fill='black',color=alpha('black',0))}
}
if (TimeScale=='Relative'){
AllDays<-(Dataset %>% filter(!(is.na(Days))))$Days
RelStartDate<-min(AllDays)
RelMaxDate<-max(AllDays)
Narratives<-Dataset %>% select(Days,ADM0NAME,DateReport1,Narrative,RealValue,SplineValue,X_axis)
Dataset<-Dataset %>% select(-c(DateReport1,Narrative,RealValue,SplineValue,X_axis)) %>% pivot_wider(names_from = 'Days',values_from='Index') %>%
replace(., is.na(.), 0) %>%
pivot_longer(cols=-c(1)) %>% rename(Days=name) %>% mutate(Days=as.numeric(Days)) %>% select(ADM0NAME,Days,Index=value) %>%
left_join(Narratives,by=c('ADM0NAME'='ADM0NAME','Days'='Days')) %>% mutate(X_axis=Days)
plot_timeline<-ggplot(Dataset,aes(x=X_axis,y=MaxValue,fill=ADM0NAME))+
geom_raster(stat='identity',position='stack',width=1,aes(alpha=Index/100))+theme(axis.ticks.y=element_blank())+
scale_fill_manual('Country',breaks=sort(unique(Dataset$ADM0NAME)),values=c(MyPalette[1:length(unique(Dataset$ADM0NAME))]))+
scale_color_manual('Country',breaks=sort(unique(Dataset$ADM0NAME)))+
scale_alpha_continuous(range=c(0,1))+
theme_minimal()+
scale_x_continuous(breaks=c(0,seq(round(RelStartDate/10)*10,RelMaxDate+5,20)),limits=c(RelStartDate,RelMaxDate+1))+
scale_y_continuous(ttl,breaks=MaxValue)+
coord_cartesian(clip = 'off')+
theme(axis.title.x=element_blank(),axis.text.y=element_text(color='white'),axis.ticks.y=element_blank(),plot.margin = unit(c(1,5,1,5),"lines"))+
annotate("text",x=RelMaxDate+1,y=seq(MaxValue*length(unique(Dataset$ADM0NAME))-MaxValue/2,MaxValue/2,-MaxValue),label=sort(unique(Dataset$ADM0NAME)),color=c(MyPalette[1:length(unique(Dataset$ADM0NAME))]),hjust=0,)+
guides(fill=FALSE,alpha=FALSE)
if(!is.null(Date_hovered)){
DaysHovered<-(Dataset %>% filter(DateReport1==Date_hovered,ADM0NAME==country_hovered))$Days
DatasetToHighlight<-Dataset %>% filter(Days==DaysHovered) %>% mutate(value=if_else(ADM0NAME==country_hovered,100,0))
DatasetToHighlight<-DatasetToHighlight %>% arrange(desc(ADM0NAME))
plot_timeline<-plot_timeline+
geom_bar(data=DatasetToHighlight,stat='identity',position = 'stack',aes(alpha=value/100),width=1,fill='black',color=alpha('black',0))}
}
return(plot_timeline)
}
PlotSeverity(ListCountries,Log,CasesOrDeaths,country_hovered,Date_hovered,StartDate,EndDate,Measure,TimeScale,RealValues)
PlotSeverity<-function(ListCountries,Log,CasesOrDeaths,country_hovered,Date_hovered,StartDate,EndDate,Measure,TimeScale,RealValues){
Dataset<-Dataset_ToPlot(ListCountries,Log,CasesOrDeaths,StartDate,EndDate,Measure,TimeScale)
if (RealValues=='Yes' & Log =='False'){
MaxValue<-max(pretty(max((Dataset %>% filter(!is.na(RealValue)))$RealValue)))
}
if (RealValues=='No' & Log =='False'){
MaxValue<-max(pretty(max((Dataset %>% filter(!is.na(SplineValue)))$SplineValue)))
}
if (RealValues=='Yes' & Log =='True'){
MaxValue<-10^(max(pretty(max((Dataset %>% filter(!is.na(RealValue)))$RealValue))))
}
if (RealValues=='No' & Log =='True'){
MaxValue<-10^(max(pretty(max((Dataset %>% filter(!is.na(SplineValue)))$SplineValue))))
}
ttl<-case_when(Measure=='Schools'~ 'Schools Measures \nSeverity',
Measure=='Gatherings'~ 'Gatherings Measures \nSeverity',
Measure=='Movements'~ 'Movements Measures \nSeverity',
Measure=='Borders' ~ 'Int. Travel Measures \nSeverity',
Measure=='Businesses' ~ 'Businesses Measures \nSeverity',
Measure=='Masks' ~ 'Masks Measures \nSeverity',
Measure=='PublicTransport' ~ 'Public Transports \nSeverity',
Measure=='All' ~ 'PHSM Severity \n')
if (TimeScale=='Absolute'){
plot_timeline<-ggplot(Dataset,aes(x=X_axis,y=MaxValue,fill=ADM0NAME))+
geom_raster(stat='identity',position='stack',width=1,aes(alpha=Index/100))+theme(axis.ticks.y=element_blank())+
scale_fill_manual('Country',breaks=sort(unique(Dataset$ADM0NAME)),values=c(MyPalette[1:length(unique(Dataset$ADM0NAME))]))+
scale_color_manual('Country',breaks=sort(unique(Dataset$ADM0NAME)))+
scale_alpha_continuous(range=c(0,1),breaks=c(0,100))+
theme_minimal()+
theme(axis.title.x=element_blank(),axis.text.y=element_text(color='white'),axis.text.x=element_text(angle = 90),axis.ticks.y=element_blank(),plot.margin = unit(c(1,5,1,5),"lines"))+
scale_x_date(date_breaks = "15 days",date_labels =  "%d-%b",limits=c(StartDate,EndDate+1))+
scale_y_continuous(ttl,breaks=MaxValue)+
coord_cartesian(clip = 'off')+
annotate("text",size = 15,x=EndDate+1,y=seq(MaxValue*length(unique(Dataset$ADM0NAME))-MaxValue/2,MaxValue/2,-MaxValue),label=sort(unique(Dataset$ADM0NAME)),color=c(MyPalette[1:length(unique(Dataset$ADM0NAME))]),hjust=0,)+
guides(fill=FALSE,alpha=FALSE)
if(!is.null(Date_hovered)){
DatasetToHighlight<-Dataset %>% filter(DateReport1==Date_hovered) %>% mutate(value=if_else(ADM0NAME==country_hovered,100,0))
DatasetToHighlight<-DatasetToHighlight %>% arrange(desc(ADM0NAME))
plot_timeline<-plot_timeline+
geom_bar(data=DatasetToHighlight,stat='identity',position = 'stack',aes(alpha=value/100),width=1,fill='black',color=alpha('black',0))}
}
if (TimeScale=='Relative'){
AllDays<-(Dataset %>% filter(!(is.na(Days))))$Days
RelStartDate<-min(AllDays)
RelMaxDate<-max(AllDays)
Narratives<-Dataset %>% select(Days,ADM0NAME,DateReport1,Narrative,RealValue,SplineValue,X_axis)
Dataset<-Dataset %>% select(-c(DateReport1,Narrative,RealValue,SplineValue,X_axis)) %>% pivot_wider(names_from = 'Days',values_from='Index') %>%
replace(., is.na(.), 0) %>%
pivot_longer(cols=-c(1)) %>% rename(Days=name) %>% mutate(Days=as.numeric(Days)) %>% select(ADM0NAME,Days,Index=value) %>%
left_join(Narratives,by=c('ADM0NAME'='ADM0NAME','Days'='Days')) %>% mutate(X_axis=Days)
plot_timeline<-ggplot(Dataset,aes(x=X_axis,y=MaxValue,fill=ADM0NAME))+
geom_raster(stat='identity',position='stack',width=1,aes(alpha=Index/100))+theme(axis.ticks.y=element_blank())+
scale_fill_manual('Country',breaks=sort(unique(Dataset$ADM0NAME)),values=c(MyPalette[1:length(unique(Dataset$ADM0NAME))]))+
scale_color_manual('Country',breaks=sort(unique(Dataset$ADM0NAME)))+
scale_alpha_continuous(range=c(0,1))+
theme_minimal()+
scale_x_continuous(breaks=c(0,seq(round(RelStartDate/10)*10,RelMaxDate+5,20)),limits=c(RelStartDate,RelMaxDate+1))+
scale_y_continuous(ttl,breaks=MaxValue)+
coord_cartesian(clip = 'off')+
theme(axis.title.x=element_blank(),axis.text.y=element_text(color='white'),axis.ticks.y=element_blank(),plot.margin = unit(c(1,5,1,5),"lines"))+
annotate("text",x=RelMaxDate+1,y=seq(MaxValue*length(unique(Dataset$ADM0NAME))-MaxValue/2,MaxValue/2,-MaxValue),label=sort(unique(Dataset$ADM0NAME)),color=c(MyPalette[1:length(unique(Dataset$ADM0NAME))]),hjust=0,)+
guides(fill=FALSE,alpha=FALSE)
if(!is.null(Date_hovered)){
DaysHovered<-(Dataset %>% filter(DateReport1==Date_hovered,ADM0NAME==country_hovered))$Days
DatasetToHighlight<-Dataset %>% filter(Days==DaysHovered) %>% mutate(value=if_else(ADM0NAME==country_hovered,100,0))
DatasetToHighlight<-DatasetToHighlight %>% arrange(desc(ADM0NAME))
plot_timeline<-plot_timeline+
geom_bar(data=DatasetToHighlight,stat='identity',position = 'stack',aes(alpha=value/100),width=1,fill='black',color=alpha('black',0))}
}
return(plot_timeline)
}
PlotSeverity(ListCountries,Log,CasesOrDeaths,country_hovered,Date_hovered,StartDate,EndDate,Measure,TimeScale,RealValues)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#import relevant packages
library(xlsx)
library(tidyverse)
library(scales)
library(rmarkdown)
#devtools::install_github("whocov/phifunc", auth_token = "7fb165f058a1f42c930f75328578253e08028453", subdir = "phifunc", dep = FALSE)
library(phifunc)
library(readxl)
library(cowplot)
library(ISOweek)
library(httr) # for working with APIs
library(jsonlite) #for working with APIs
library(openxlsx)
library(rvest)
library(assertthat)
library(lubridate)
library(flextable)
library(officer)
library(fst)
library(here)
source(here::here("R", "utils", "calc_previous_iso_week.R"))
# specify reporting week - if null system date minus 6 days is used (in format 2021-03)
reporting.week <- NULL
# define weeks of relevance
if (is.null(reporting.week)) {
today_day <- lubridate::wday(Sys.Date(), week_start=1)
if (today_day < 4) {
reporting.week <- str_replace(ISOweek(Sys.Date() - 7 - today_day), "W", "")
} else {
reporting.week <- str_replace(ISOweek(Sys.Date() - 7), "W", "")
}
}
previous.week <- calc_previous_iso_week(reporting.week)
source(here::here("scripts", "pull_data.R"), local = TRUE)
#source other functions
functions <- list.files(here::here('R'), pattern = ".R$", recursive = TRUE)
for (i in 1:length(functions)) {
source(here::here("R",functions[i]))
}
# Convert tessy data to xmart format --------------------------------------
# get file names
combined_file_name <- dir(here::here("data", "weekly"), "^tessy_aggregated_")
infl_file_name <- "INFL_RawData.xlsx"
testing_file_name <- dir(here::here("data", "weekly"), "^tessy_national_tests_")
variant_file_name <- dir(here::here("data", "weekly"), "^VirusVariant_AGG_")
# check only one match for file name in directory
assert_that(length(combined_file_name) == 1)
assert_that(length(testing_file_name) == 1)
assert_that(length(variant_file_name) == 1)
# read in files
combined_raw_data <- read_csv(here::here("data", "weekly", combined_file_name[1]),
guess_max=5000)
inflvir_data <- read_excel(here::here("data", "weekly", infl_file_name),
sheet = "INFLVIR", col_types = "text") %>% type_convert()
inflsari_data <- read_excel(here::here("data", "weekly", infl_file_name),
sheet="INFLSARIAGGR", col_types = "text") %>% type_convert()
testing_data <- read_csv(here::here("data", "weekly", testing_file_name),
guess_max=5000)
data <- convert_raw_to_xmart_format(combined=combined_raw_data, inflvir=inflvir_data,
inflsar=inflsari_data, testing=testing_data, pop_data=country_pop_new)
incidence_age_pop <- read_csv(here::here("data", "age_group_denominators_for_incidence_figures_2020.csv")) %>%
select(report_country, age_group, population)
# Flu data- clinical, virological, historical; thresholds; iso lookup; population; vaccinations --
vaccine_file_name <- dir(here::here("data", "weekly"), "TESSy_backup.csv$")
assert_that(length(vaccine_file_name) == 1)
vaccine_data <- read_csv(here::here("data", "weekly", vaccine_file_name), guess_max=5000)
vaccine_age_pop <- read_csv(here::here("data", "age_group_denominators_for_vaccine_figures_2020.csv"))
vaccine_data <- vaccine_data %>% clean_vaccine_data(vaccine_age_pop, country_pop_new, reporting.week)
variant_data <- read_csv(here::here("data", "weekly", variant_file_name)) %>% clean_variant_calc('English')
data.c <- read_excel(here::here("data","weekly", "INFL_RawData.xlsx"), sheet = "INFLCLIN", guess_max=5000)
data.h <- read_csv(here::here("data", "1.INFLCLINAGGR.csv"), guess_max=5000)
thresholds <- read_excel(here::here("data", "Thresholds.xlsx"))
geog.lookup <- read_excel(here::here("data", "CountryCode.xlsx"))
data.v <- inflvir_data
listcountries <- unique(data$report_country) %>% sort()
# Create output directories -----------------------------------------------
dir.create(paste0(here::here("reports"),'/output/',reporting.week), showWarnings = FALSE)
week_directory<-paste0(here::here("reports"),'/output/',reporting.week)
dir.create(paste0(week_directory,'/charts'),showWarnings = FALSE)
dir.create(paste0(week_directory,'/reports'),showWarnings = FALSE)
dir.create(paste0(week_directory,'/tests'),showWarnings = FALSE)
# Test graphs used in report and app --------------------------------------
# render(here::here("reports","GraphTests.Rmd"),
#        output_file=here::here("reports", "output", paste0(reporting.week, "/tests/GraphTests-",
#        reporting.week, ".html")))

mutate(ADM0NAME=if_else(ADM0NAME=='Kosovo','Kosovo(1)',ADM0NAME)) %>%
mutate(NewCases=as.double(NewCases),
TotalCases=as.double(TotalCases))
MainDataset<-MainDataset_ %>%
merge(StringencyIndex,by.x=c('DateReport1','ADM0NAME'),by.y=c('Date','ADM0NAME'),all=TRUE) %>%
filter(!is.na(DateReport1)) %>%
filter(ADM0NAME %in% unique(StringencyIndex$ADM0NAME)) %>%
# mutate(NewCases = if_else(is.na(NewCases),0,NewCases),
#        NewDeaths = if_else(is.na(NewDeaths),0,NewDeaths),
#        TotalCases = if_else(is.na(TotalCases),0,TotalCases),
#        TotalDeaths = if_else(is.na(TotalDeaths),0,TotalDeaths)) %>%
#left_join(StringencyIndex,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_SeverityIndex,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Masks,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Schools,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Businesses,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Borders,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Gatherings,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Movements,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_PublicTransport,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date"))
RelativeDays<-function(ctr){
DatasetCountry<-MainDataset %>% filter(ADM0NAME==ctr)
minDateAll<-min((DatasetCountry %>% filter(!is.na(Narrative_All)))$DateReport1)
minDateSchools<-min((DatasetCountry %>% filter(!is.na(Narrative_Schools)))$DateReport1)
minDateMasks<-min((DatasetCountry %>% filter(!is.na(Narrative_Masks)))$DateReport1)
minDateGatherings<-min((DatasetCountry %>% filter(!is.na(Narrative_Gatherings)))$DateReport1)
minDateBusinesses<-min((DatasetCountry %>% filter(!is.na(Narrative_Businesses)))$DateReport1)
minDateBorders<-min((DatasetCountry %>% filter(!is.na(Narrative_Borders)))$DateReport1)
minDateMovements<-min((DatasetCountry %>% filter(!is.na(Narrative_Movements)))$DateReport1)
minDatePublicTransport<-min((DatasetCountry %>% filter(!is.na(Narrative_PublicTransport)))$DateReport1)
DatasetCountry<-DatasetCountry %>% mutate(Days_All=DateReport1-minDateAll) %>%
mutate(Days_Schools=as.numeric(DateReport1-minDateSchools)) %>%
mutate(Days_Masks=as.numeric(DateReport1-minDateMasks)) %>%
mutate(Days_Gatherings=as.numeric(DateReport1-minDateGatherings)) %>%
mutate(Days_Movements=as.numeric(DateReport1-minDateMovements)) %>%
mutate(Days_Borders=as.numeric(DateReport1-minDateBorders)) %>%
mutate(Days_Businesses=as.numeric(DateReport1-minDateBusinesses)) %>%
mutate(Days_PublicTransport=as.numeric(DateReport1-minDatePublicTransport))
return(DatasetCountry)
}
BuildNewDataset<-function(ctr){
CountryDataset<-RelativeDays(ctr)
CountryDataset<-CountryDataset %>%
mutate(ThreeDaysAverage_Cases=(NewCases+lag(NewCases,1)+lead(NewCases,1))/3,
ThreeDaysAverage_Deaths=(NewDeaths+lag(NewDeaths,1)+lead(NewDeaths,1))/3)
CountryDataset_<-CountryDataset %>% select(-c("WHO_Code","epiWeek")) %>%
mutate(log10_MovingAverage_Cases=log10(ThreeDaysAverage_Cases),
log10_MovingAverage_Deaths=log10(ThreeDaysAverage_Deaths))
return(CountryDataset_)
}
DatasetToSmooth<-function(ctr){
CountryDataset<-BuildNewDataset(ctr)
CountryDataset<-CountryDataset %>% mutate(log_cases=log10(NewCases),log_deaths=log10(NewDeaths))
return(CountryDataset)}
DatasetWithSplineValues<-function(ctr){
CountryDataset<-DatasetToSmooth(ctr)
CountryDataset_Cases<-DatasetToSmooth(ctr) %>% filter(!is.na(ThreeDaysAverage_Cases)) %>% select(DateReport1,ThreeDaysAverage_Cases)
CountryDataset_Deaths<-DatasetToSmooth(ctr) %>% filter(!is.na(ThreeDaysAverage_Deaths)) %>% select(DateReport1,ThreeDaysAverage_Deaths)
CountryDataset_logCases<-DatasetToSmooth(ctr) %>% filter(!is.na(log10_MovingAverage_Cases)) %>%
select(DateReport1,log10_MovingAverage_Cases) %>% filter(log10_MovingAverage_Cases!=-Inf)
CountryDataset_logDeaths<-DatasetToSmooth(ctr) %>% filter(!is.na(log10_MovingAverage_Deaths)) %>%
select(DateReport1,log10_MovingAverage_Deaths) %>% filter(log10_MovingAverage_Deaths!=-Inf)
Spline_3DaysAverageCases<-smooth.spline(x=CountryDataset_Cases$DateReport1,y=CountryDataset_Cases$ThreeDaysAverage_Cases,spar=0.5)
Spline_3DaysAverageDeaths<-smooth.spline(x=CountryDataset_Deaths$DateReport1,y=CountryDataset_Deaths$ThreeDaysAverage_Deaths,spar=0.5)
Spline_3DaysAverage_LogCases<-smooth.spline(x=CountryDataset_logCases$DateReport1,y=CountryDataset_logCases$log10_MovingAverage_Cases,spar=0.5)
Spline_3DaysAverage_LogDeaths<-smooth.spline(x=CountryDataset_logDeaths$DateReport1,y=CountryDataset_logDeaths$log10_MovingAverage_Deaths,spar=0.5)
ValuesSpline_3DaysAverageCases<-data.frame(SplineValue_3DaysAverageCases=predict(Spline_3DaysAverageCases,deriv=0))
ValuesSpline_3DaysAverageDeaths<-data.frame(SplineValue_3DaysAverageDeaths=predict(Spline_3DaysAverageDeaths,deriv=0))
ValuesSpline_3DaysAverage_LogCases<-data.frame(SplineValue_3DaysAverage_LogCases=predict(Spline_3DaysAverage_LogCases,deriv=0))
ValuesSpline_3DaysAverage_LogDeaths<-data.frame(SplineValue_3DaysAverage_LogDeaths=predict(Spline_3DaysAverage_LogDeaths,deriv=0))
CountryDataset_Cases<-data.frame(CountryDataset_Cases,ValuesSpline_3DaysAverageCases) %>%
select(DateReport1,"Spline_3DaysAverageCases"="SplineValue_3DaysAverageCases.y")
CountryDataset_Deaths<-data.frame(CountryDataset_Deaths,ValuesSpline_3DaysAverageDeaths) %>%
select(DateReport1,"Spline_3DaysAverageDeaths"="SplineValue_3DaysAverageDeaths.y")
CountryDataset_logCases<-data.frame(CountryDataset_logCases,ValuesSpline_3DaysAverage_LogCases) %>%
select(DateReport1,"Spline_3DaysAverage_logCases"="SplineValue_3DaysAverage_LogCases.y")
CountryDataset_logDeaths<-data.frame(CountryDataset_logDeaths,ValuesSpline_3DaysAverage_LogDeaths) %>%
select(DateReport1,"Spline_3DaysAverage_logDeaths"="SplineValue_3DaysAverage_LogDeaths.y")
CountryDataset_<-CountryDataset %>%
left_join(CountryDataset_Cases,by='DateReport1') %>%
left_join(CountryDataset_Deaths,by='DateReport1') %>%
left_join(CountryDataset_logCases,by='DateReport1') %>%
left_join(CountryDataset_logDeaths,by='DateReport1')
x <- zoo(CountryDataset_$Spline_3DaysAverage_logCases,CountryDataset_$DateReport1)
x <- na_interpolation(x, option = "linear") %>% fortify.zoo
y <- zoo(CountryDataset_$Spline_3DaysAverage_logDeaths,CountryDataset_$DateReport1)
y <- na_interpolation(y, option = "linear") %>% fortify.zoo
CountryDataset_<-CountryDataset_ %>% left_join(x,by=c('DateReport1'='Index')) %>% rename(Spline_3DaysAverage_logCases_='.')
CountryDataset_<-CountryDataset_ %>% left_join(y,by=c('DateReport1'='Index')) %>% rename(Spline_3DaysAverage_logDeaths_='.')
return(CountryDataset_)
}
CheckAtLeast4Values<-function(){
ListCountriesOkToSpline<-data.frame()
for (ctr in unique(MainDataset$ADM0NAME)){
CountryDataset<-MainDataset %>% filter(ADM0NAME==ctr)
CountryDataset<-CountryDataset %>% filter(NewDeaths!=0)
if ((nrow(CountryDataset)) > 3){
ListCountriesOkToSpline<-c(ctr,ListCountriesOkToSpline)}
}
return(ListCountriesOkToSpline)}
GlobalDataset_<-data.frame()
for (ctr in CheckAtLeast4Values()){
GlobalDataset<-DatasetWithSplineValues(ctr)
GlobalDataset_<-bind_rows(GlobalDataset_,GlobalDataset)
}
maxDate<-min(max(StringencyIndex$Date,na.rm=TRUE),max(MainDataset_$DateReport1,na.rm=TRUE))
minDate<-max(min(StringencyIndex$Date,na.rm=TRUE),min(MainDataset_$DateReport1,na.rm=TRUE))
GlobalDataset_<-GlobalDataset_ %>% filter(DateReport1<=maxDate) %>% filter(DateReport1>=minDate)
write.csv(GlobalDataset_,paste0(folderOutput,'/GlobalDataset.csv'))
PackagesToInstall<-c('imputeTS','zoo',"hablar","ggsci",'BBmisc',"stringr","magick","gridExtra","lubridate","readxl","RColorBrewer","ggplot2","dplyr","rmarkdown","kableExtra","flextable","ggpubr","knitr","scales","tidyr","scales","xml2","rvest","qdapRegex",'cowplot')
for (i in PackagesToInstall) {
print(i)
if (!i %in% installed.packages())
{install.packages(i)}
library(i, character.only = TRUE)
}
folder_<-dirname(rstudioapi::getSourceEditorContext()$path)
folderInput_1<-paste0(folder_,'/input_step2')
folderInput_2<-paste0(folder_,'/output_step1')
folderOutput<-paste0(folder_,'/output_step2')
folderApp_Single<-paste0(dirname(folder_),'/app_single')
folderApp_Multiple<-paste0(dirname(folder_),'/app_multiple')
StringencyIndex<-read.csv(paste0(folderInput_2,'/StringencyIndex.csv'))
StringencyIndex<-StringencyIndex %>% rename(Schools=School,Businesses=Workplace,Movements=StayHome,Borders=Travels) %>%
mutate(Date=as.Date(Date)) %>% mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME)) %>%
arrange(ADM0NAME)
KeyDates_SeverityIndex<-read_excel(paste0(folderInput_1,'/KeyDates.xlsx'),sheet='Severity Index') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_All) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Schools<-read_excel(paste0(folderInput_1,'/KeyDates.xlsx'),sheet='Schools') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Schools) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Masks<-read_excel(paste0(folderInput_1,'/KeyDates.xlsx'),sheet='Masks') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Masks) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Businesses<-read_excel(paste0(folderInput_1,'/KeyDates.xlsx'),sheet='Businesses') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Businesses) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Movements<-read_excel(paste0(folderInput_1,'/KeyDates.xlsx'),sheet='Movements') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Movements)
KeyDates_Borders<-read_excel(paste0(folderInput_1,'/KeyDates.xlsx'),sheet='Borders') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Borders) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Gatherings<-read_excel(paste0(folderInput_1,'/KeyDates.xlsx'),sheet='Gatherings') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy"))))%>%
select(Date,ADM0NAME,Narrative_Gatherings) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_PublicTransport<-read_excel(paste0(folderInput_1,'/KeyDates.xlsx'),sheet='PublicTransport') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy"))))%>%
select(Date,ADM0NAME,Narrative_PublicTransport) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
MainDataset_<-read.csv(paste0(folderInput_1,"/qry_covid_running_cases_country_date.CSV")) %>%
mutate(ADM0NAME=str_to_title(ADM0NAME),
DateReport1=as.Date(parse_date_time(DateReport1,c("dmy", "ymd","mdy")))) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Kosovo','Kosovo(1)',ADM0NAME)) %>%
mutate(NewCases=as.double(NewCases),
TotalCases=as.double(TotalCases))
MainDataset<-MainDataset_ %>%
merge(StringencyIndex,by.x=c('DateReport1','ADM0NAME'),by.y=c('Date','ADM0NAME'),all=TRUE) %>%
filter(!is.na(DateReport1)) %>%
filter(ADM0NAME %in% unique(StringencyIndex$ADM0NAME)) %>%
# mutate(NewCases = if_else(is.na(NewCases),0,NewCases),
#        NewDeaths = if_else(is.na(NewDeaths),0,NewDeaths),
#        TotalCases = if_else(is.na(TotalCases),0,TotalCases),
#        TotalDeaths = if_else(is.na(TotalDeaths),0,TotalDeaths)) %>%
#left_join(StringencyIndex,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_SeverityIndex,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Masks,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Schools,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Businesses,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Borders,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Gatherings,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Movements,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_PublicTransport,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date"))
RelativeDays<-function(ctr){
DatasetCountry<-MainDataset %>% filter(ADM0NAME==ctr)
minDateAll<-min((DatasetCountry %>% filter(!is.na(Narrative_All)))$DateReport1)
minDateSchools<-min((DatasetCountry %>% filter(!is.na(Narrative_Schools)))$DateReport1)
minDateMasks<-min((DatasetCountry %>% filter(!is.na(Narrative_Masks)))$DateReport1)
minDateGatherings<-min((DatasetCountry %>% filter(!is.na(Narrative_Gatherings)))$DateReport1)
minDateBusinesses<-min((DatasetCountry %>% filter(!is.na(Narrative_Businesses)))$DateReport1)
minDateBorders<-min((DatasetCountry %>% filter(!is.na(Narrative_Borders)))$DateReport1)
minDateMovements<-min((DatasetCountry %>% filter(!is.na(Narrative_Movements)))$DateReport1)
minDatePublicTransport<-min((DatasetCountry %>% filter(!is.na(Narrative_PublicTransport)))$DateReport1)
DatasetCountry<-DatasetCountry %>% mutate(Days_All=DateReport1-minDateAll) %>%
mutate(Days_Schools=as.numeric(DateReport1-minDateSchools)) %>%
mutate(Days_Masks=as.numeric(DateReport1-minDateMasks)) %>%
mutate(Days_Gatherings=as.numeric(DateReport1-minDateGatherings)) %>%
mutate(Days_Movements=as.numeric(DateReport1-minDateMovements)) %>%
mutate(Days_Borders=as.numeric(DateReport1-minDateBorders)) %>%
mutate(Days_Businesses=as.numeric(DateReport1-minDateBusinesses)) %>%
mutate(Days_PublicTransport=as.numeric(DateReport1-minDatePublicTransport))
return(DatasetCountry)
}
BuildNewDataset<-function(ctr){
CountryDataset<-RelativeDays(ctr)
CountryDataset<-CountryDataset %>%
mutate(ThreeDaysAverage_Cases=(NewCases+lag(NewCases,1)+lead(NewCases,1))/3,
ThreeDaysAverage_Deaths=(NewDeaths+lag(NewDeaths,1)+lead(NewDeaths,1))/3)
CountryDataset_<-CountryDataset %>% select(-c("WHO_Code","epiWeek")) %>%
mutate(log10_MovingAverage_Cases=log10(ThreeDaysAverage_Cases),
log10_MovingAverage_Deaths=log10(ThreeDaysAverage_Deaths))
return(CountryDataset_)
}
DatasetToSmooth<-function(ctr){
CountryDataset<-BuildNewDataset(ctr)
CountryDataset<-CountryDataset %>% mutate(log_cases=log10(NewCases),log_deaths=log10(NewDeaths))
return(CountryDataset)}
DatasetWithSplineValues<-function(ctr){
CountryDataset<-DatasetToSmooth(ctr)
CountryDataset_Cases<-DatasetToSmooth(ctr) %>% filter(!is.na(ThreeDaysAverage_Cases)) %>% select(DateReport1,ThreeDaysAverage_Cases)
CountryDataset_Deaths<-DatasetToSmooth(ctr) %>% filter(!is.na(ThreeDaysAverage_Deaths)) %>% select(DateReport1,ThreeDaysAverage_Deaths)
CountryDataset_logCases<-DatasetToSmooth(ctr) %>% filter(!is.na(log10_MovingAverage_Cases)) %>%
select(DateReport1,log10_MovingAverage_Cases) %>% filter(log10_MovingAverage_Cases!=-Inf)
CountryDataset_logDeaths<-DatasetToSmooth(ctr) %>% filter(!is.na(log10_MovingAverage_Deaths)) %>%
select(DateReport1,log10_MovingAverage_Deaths) %>% filter(log10_MovingAverage_Deaths!=-Inf)
Spline_3DaysAverageCases<-smooth.spline(x=CountryDataset_Cases$DateReport1,y=CountryDataset_Cases$ThreeDaysAverage_Cases,spar=0.5)
Spline_3DaysAverageDeaths<-smooth.spline(x=CountryDataset_Deaths$DateReport1,y=CountryDataset_Deaths$ThreeDaysAverage_Deaths,spar=0.5)
Spline_3DaysAverage_LogCases<-smooth.spline(x=CountryDataset_logCases$DateReport1,y=CountryDataset_logCases$log10_MovingAverage_Cases,spar=0.5)
Spline_3DaysAverage_LogDeaths<-smooth.spline(x=CountryDataset_logDeaths$DateReport1,y=CountryDataset_logDeaths$log10_MovingAverage_Deaths,spar=0.5)
ValuesSpline_3DaysAverageCases<-data.frame(SplineValue_3DaysAverageCases=predict(Spline_3DaysAverageCases,deriv=0))
ValuesSpline_3DaysAverageDeaths<-data.frame(SplineValue_3DaysAverageDeaths=predict(Spline_3DaysAverageDeaths,deriv=0))
ValuesSpline_3DaysAverage_LogCases<-data.frame(SplineValue_3DaysAverage_LogCases=predict(Spline_3DaysAverage_LogCases,deriv=0))
ValuesSpline_3DaysAverage_LogDeaths<-data.frame(SplineValue_3DaysAverage_LogDeaths=predict(Spline_3DaysAverage_LogDeaths,deriv=0))
CountryDataset_Cases<-data.frame(CountryDataset_Cases,ValuesSpline_3DaysAverageCases) %>%
select(DateReport1,"Spline_3DaysAverageCases"="SplineValue_3DaysAverageCases.y")
CountryDataset_Deaths<-data.frame(CountryDataset_Deaths,ValuesSpline_3DaysAverageDeaths) %>%
select(DateReport1,"Spline_3DaysAverageDeaths"="SplineValue_3DaysAverageDeaths.y")
CountryDataset_logCases<-data.frame(CountryDataset_logCases,ValuesSpline_3DaysAverage_LogCases) %>%
select(DateReport1,"Spline_3DaysAverage_logCases"="SplineValue_3DaysAverage_LogCases.y")
CountryDataset_logDeaths<-data.frame(CountryDataset_logDeaths,ValuesSpline_3DaysAverage_LogDeaths) %>%
select(DateReport1,"Spline_3DaysAverage_logDeaths"="SplineValue_3DaysAverage_LogDeaths.y")
CountryDataset_<-CountryDataset %>%
left_join(CountryDataset_Cases,by='DateReport1') %>%
left_join(CountryDataset_Deaths,by='DateReport1') %>%
left_join(CountryDataset_logCases,by='DateReport1') %>%
left_join(CountryDataset_logDeaths,by='DateReport1')
x <- zoo(CountryDataset_$Spline_3DaysAverage_logCases,CountryDataset_$DateReport1)
x <- na_interpolation(x, option = "linear") %>% fortify.zoo
y <- zoo(CountryDataset_$Spline_3DaysAverage_logDeaths,CountryDataset_$DateReport1)
y <- na_interpolation(y, option = "linear") %>% fortify.zoo
CountryDataset_<-CountryDataset_ %>% left_join(x,by=c('DateReport1'='Index')) %>% rename(Spline_3DaysAverage_logCases_='.')
CountryDataset_<-CountryDataset_ %>% left_join(y,by=c('DateReport1'='Index')) %>% rename(Spline_3DaysAverage_logDeaths_='.')
return(CountryDataset_)
}
CheckAtLeast4Values<-function(){
ListCountriesOkToSpline<-data.frame()
for (ctr in unique(MainDataset$ADM0NAME)){
CountryDataset<-MainDataset %>% filter(ADM0NAME==ctr)
CountryDataset<-CountryDataset %>% filter(NewDeaths!=0)
if ((nrow(CountryDataset)) > 3){
ListCountriesOkToSpline<-c(ctr,ListCountriesOkToSpline)}
}
return(ListCountriesOkToSpline)}
GlobalDataset_<-data.frame()
for (ctr in CheckAtLeast4Values()){
GlobalDataset<-DatasetWithSplineValues(ctr)
GlobalDataset_<-bind_rows(GlobalDataset_,GlobalDataset)
}
maxDate<-min(max(StringencyIndex$Date,na.rm=TRUE),max(MainDataset_$DateReport1,na.rm=TRUE))
minDate<-max(min(StringencyIndex$Date,na.rm=TRUE),min(MainDataset_$DateReport1,na.rm=TRUE))
GlobalDataset_<-GlobalDataset_ %>% filter(DateReport1<=maxDate) %>% filter(DateReport1>=minDate)
write.csv(GlobalDataset_,paste0(folderOutput,'/GlobalDataset.csv'))
#Slovakia
Data_Slovakia<-function(){
Bloc_A<-read_html("https://korona.gov.sk/") %>%
html_nodes(xpath='//*[@id="block_5e9991c460002"]/div/h2/text()') %>%
html_text()
TotalCases_PCR<-as.numeric(gsub("([^[:digit:]]*)", "", Bloc_A))
Bloc_G<-read_html("https://korona.gov.sk/") %>%
html_nodes(xpath='//*[@id="block_5e9991c460002"]/div/p') %>%
html_text()
NewCases_PCR<-as.numeric(gsub("([^[:digit:]]*)", "", Bloc_G))
Bloc_B<-read_html("https://korona.gov.sk/") %>%
html_nodes('#block_5e9991ed60005 > div:nth-child(1) > h2:nth-child(1)') %>%
html_text()
TotalDeaths<-as.numeric(gsub("([^[:digit:]]*)", "", Bloc_B))
Bloc_J<-read_html("https://korona.gov.sk/") %>%
html_nodes('#block_5e9991ed60005 > div:nth-child(1) > p:nth-child(2)') %>%
html_text()
NewDeaths<-as.numeric(gsub("([^[:digit:]]*)", "", Bloc_J))
Bloc_C<-read_html("https://korona.gov.sk/") %>%
html_nodes('#block_5e9990e25ffff > div:nth-child(1) > h2:nth-child(1)') %>%
html_text()
TotalTests_PCR<-as.numeric(gsub("([^[:digit:]]*)", "", Bloc_C))
Bloc_D<-read_html("https://korona.gov.sk/") %>%
html_nodes('#block_5e9990e25ffff > div:nth-child(1) > p:nth-child(2)') %>%
html_text()
NewTests_PCR<-as.numeric(gsub("([^[:digit:]]*)", "", Bloc_D))
Bloc_E<-read_html("https://korona.gov.sk/") %>%
html_nodes('#block_5fb764f549941 > div:nth-child(1) > h2:nth-child(1)') %>%
html_text()
TotalTests_AG<-as.numeric(gsub("([^[:digit:]]*)", "", Bloc_E))
Bloc_F<-read_html("https://korona.gov.sk/") %>%
html_nodes('#block_5fb764f549941 > div:nth-child(1) > p:nth-child(2)') %>%
html_text()
NewTests_AG<-as.numeric(gsub("([^[:digit:]]*)", "", Bloc_F))
Bloc_H<-read_html("https://korona.gov.sk/") %>%
html_nodes('#block_5fb764f549943 > div:nth-child(1) > h2:nth-child(1)') %>%
html_text()
TotalCases_AG<-as.numeric(gsub("([^[:digit:]]*)", "", Bloc_H))
Bloc_I<-read_html("https://korona.gov.sk/") %>%
html_nodes('#block_5fb764f549943 > div:nth-child(1) > p:nth-child(2)') %>%
html_text
TotalCases<-TotalCases_PCR
NewCases_AG<-as.numeric(gsub("([^[:digit:]]*)", "", Bloc_I))
TotalTests<-TotalTests_PCR
NewTests<-NewTests_PCR
NewCases<-NewCases_PCR+NewCases_AG
Bloc_K<-read_html("https://korona.gov.sk/") %>%
html_nodes('#block_6007f1bbea5a1 > div > h3') %>%
html_text()
TotalVaccinated_First<-as.numeric(gsub("([^[:digit:]]*)", "", Bloc_K))
Bloc_L<-read_html("https://korona.gov.sk/") %>%
html_nodes('#block_6007f1bbea5a1 > div:nth-child(1) > p:nth-child(2)') %>%
html_text()
NewVaccinated<-as.numeric(gsub("([^[:digit:]]*)", "", Bloc_L))
return(data.frame(ADM0NAME='Slovakia',
TotalCases=TotalCases,
TotalDeaths=TotalDeaths,
NewCases=NewCases,
NewDeaths=NewDeaths,
NewVaccinated=NewVaccinated,
TotalVaccinated_First=TotalVaccinated_First,
TotalTests=TotalTests,
NewTests=NewTests))
}
runApp()
runApp('~/GitHub/Shiny_PHSM/app_multiple_SEARO')
PackagesToInstall<-c('imputeTS','zoo',"hablar","ggsci",'BBmisc',"stringr","magick","gridExtra","lubridate","readxl","RColorBrewer","ggplot2","dplyr","rmarkdown","kableExtra","flextable","ggpubr","knitr","scales","tidyr","scales","xml2","rvest","qdapRegex",'cowplot')
for (i in PackagesToInstall) {
print(i)
if (!i %in% installed.packages())
{install.packages(i)}
library(i, character.only = TRUE)
}
folder_<-dirname(rstudioapi::getSourceEditorContext()$path)
folderInput_1<-paste0(folder_,'/input_step2')
folderInput_2<-paste0(folder_,'/output_step1')
folderOutput<-paste0(folder_,'/output_step2')
folderApp_Single<-paste0(dirname(folder_),'/app_single')
folderApp_Multiple<-paste0(dirname(folder_),'/app_multiple')
StringencyIndex<-read.csv(paste0(folderInput_2,'/StringencyIndex.csv'))
StringencyIndex<-StringencyIndex %>% rename(Schools=School,Businesses=Workplace,Movements=StayHome,Borders=Travels) %>%
mutate(Date=as.Date(Date)) %>% mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME)) %>%
arrange(ADM0NAME)
KeyDates_SeverityIndex<-read_excel(paste0(folderInput_1,'/KeyDates.xlsx'),sheet='Severity Index') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_All) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Schools<-read_excel(paste0(folderInput_1,'/KeyDates.xlsx'),sheet='Schools') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Schools) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Masks<-read_excel(paste0(folderInput_1,'/KeyDates.xlsx'),sheet='Masks') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Masks) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Businesses<-read_excel(paste0(folderInput_1,'/KeyDates.xlsx'),sheet='Businesses') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Businesses) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Movements<-read_excel(paste0(folderInput_1,'/KeyDates.xlsx'),sheet='Movements') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Movements)
KeyDates_Borders<-read_excel(paste0(folderInput_1,'/KeyDates.xlsx'),sheet='Borders') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Borders) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Gatherings<-read_excel(paste0(folderInput_1,'/KeyDates.xlsx'),sheet='Gatherings') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy"))))%>%
select(Date,ADM0NAME,Narrative_Gatherings) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_PublicTransport<-read_excel(paste0(folderInput_1,'/KeyDates.xlsx'),sheet='PublicTransport') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy"))))%>%
select(Date,ADM0NAME,Narrative_PublicTransport) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
MainDataset_<-read.csv(paste0(folderInput_1,"/qry_covid_running_cases_country_date.CSV")) %>%
mutate(ADM0NAME=str_to_title(ADM0NAME),
DateReport1=as.Date(parse_date_time(DateReport1,c("dmy", "ymd","mdy")))) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Kosovo','Kosovo(1)',ADM0NAME)) %>%
mutate(NewCases=as.double(NewCases),
TotalCases=as.double(TotalCases))
MainDataset<-MainDataset_ %>%
merge(StringencyIndex,by.x=c('DateReport1','ADM0NAME'),by.y=c('Date','ADM0NAME'),all=TRUE) %>%
filter(!is.na(DateReport1)) %>%
filter(ADM0NAME %in% unique(StringencyIndex$ADM0NAME)) %>%
# mutate(NewCases = if_else(is.na(NewCases),0,NewCases),
#        NewDeaths = if_else(is.na(NewDeaths),0,NewDeaths),
#        TotalCases = if_else(is.na(TotalCases),0,TotalCases),
#        TotalDeaths = if_else(is.na(TotalDeaths),0,TotalDeaths)) %>%
#left_join(StringencyIndex,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_SeverityIndex,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Masks,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Schools,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Businesses,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Borders,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Gatherings,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Movements,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_PublicTransport,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date"))
RelativeDays<-function(ctr){
DatasetCountry<-MainDataset %>% filter(ADM0NAME==ctr)
minDateAll<-min((DatasetCountry %>% filter(!is.na(Narrative_All)))$DateReport1)
minDateSchools<-min((DatasetCountry %>% filter(!is.na(Narrative_Schools)))$DateReport1)
minDateMasks<-min((DatasetCountry %>% filter(!is.na(Narrative_Masks)))$DateReport1)
minDateGatherings<-min((DatasetCountry %>% filter(!is.na(Narrative_Gatherings)))$DateReport1)
minDateBusinesses<-min((DatasetCountry %>% filter(!is.na(Narrative_Businesses)))$DateReport1)
minDateBorders<-min((DatasetCountry %>% filter(!is.na(Narrative_Borders)))$DateReport1)
minDateMovements<-min((DatasetCountry %>% filter(!is.na(Narrative_Movements)))$DateReport1)
minDatePublicTransport<-min((DatasetCountry %>% filter(!is.na(Narrative_PublicTransport)))$DateReport1)
DatasetCountry<-DatasetCountry %>% mutate(Days_All=DateReport1-minDateAll) %>%
mutate(Days_Schools=as.numeric(DateReport1-minDateSchools)) %>%
mutate(Days_Masks=as.numeric(DateReport1-minDateMasks)) %>%
mutate(Days_Gatherings=as.numeric(DateReport1-minDateGatherings)) %>%
mutate(Days_Movements=as.numeric(DateReport1-minDateMovements)) %>%
mutate(Days_Borders=as.numeric(DateReport1-minDateBorders)) %>%
mutate(Days_Businesses=as.numeric(DateReport1-minDateBusinesses)) %>%
mutate(Days_PublicTransport=as.numeric(DateReport1-minDatePublicTransport))
return(DatasetCountry)
}
BuildNewDataset<-function(ctr){
CountryDataset<-RelativeDays(ctr)
CountryDataset<-CountryDataset %>%
mutate(ThreeDaysAverage_Cases=(NewCases+lag(NewCases,1)+lead(NewCases,1))/3,
ThreeDaysAverage_Deaths=(NewDeaths+lag(NewDeaths,1)+lead(NewDeaths,1))/3)
CountryDataset_<-CountryDataset %>% select(-c("WHO_Code","epiWeek")) %>%
mutate(log10_MovingAverage_Cases=log10(ThreeDaysAverage_Cases),
log10_MovingAverage_Deaths=log10(ThreeDaysAverage_Deaths))
return(CountryDataset_)
}
DatasetToSmooth<-function(ctr){
CountryDataset<-BuildNewDataset(ctr)
CountryDataset<-CountryDataset %>% mutate(log_cases=log10(NewCases),log_deaths=log10(NewDeaths))
return(CountryDataset)}
DatasetWithSplineValues<-function(ctr){
CountryDataset<-DatasetToSmooth(ctr)
CountryDataset_Cases<-DatasetToSmooth(ctr) %>% filter(!is.na(ThreeDaysAverage_Cases)) %>% select(DateReport1,ThreeDaysAverage_Cases)
CountryDataset_Deaths<-DatasetToSmooth(ctr) %>% filter(!is.na(ThreeDaysAverage_Deaths)) %>% select(DateReport1,ThreeDaysAverage_Deaths)
CountryDataset_logCases<-DatasetToSmooth(ctr) %>% filter(!is.na(log10_MovingAverage_Cases)) %>%
select(DateReport1,log10_MovingAverage_Cases) %>% filter(log10_MovingAverage_Cases!=-Inf)
CountryDataset_logDeaths<-DatasetToSmooth(ctr) %>% filter(!is.na(log10_MovingAverage_Deaths)) %>%
select(DateReport1,log10_MovingAverage_Deaths) %>% filter(log10_MovingAverage_Deaths!=-Inf)
Spline_3DaysAverageCases<-smooth.spline(x=CountryDataset_Cases$DateReport1,y=CountryDataset_Cases$ThreeDaysAverage_Cases,spar=0.5)
Spline_3DaysAverageDeaths<-smooth.spline(x=CountryDataset_Deaths$DateReport1,y=CountryDataset_Deaths$ThreeDaysAverage_Deaths,spar=0.5)
Spline_3DaysAverage_LogCases<-smooth.spline(x=CountryDataset_logCases$DateReport1,y=CountryDataset_logCases$log10_MovingAverage_Cases,spar=0.5)
Spline_3DaysAverage_LogDeaths<-smooth.spline(x=CountryDataset_logDeaths$DateReport1,y=CountryDataset_logDeaths$log10_MovingAverage_Deaths,spar=0.5)
ValuesSpline_3DaysAverageCases<-data.frame(SplineValue_3DaysAverageCases=predict(Spline_3DaysAverageCases,deriv=0))
ValuesSpline_3DaysAverageDeaths<-data.frame(SplineValue_3DaysAverageDeaths=predict(Spline_3DaysAverageDeaths,deriv=0))
ValuesSpline_3DaysAverage_LogCases<-data.frame(SplineValue_3DaysAverage_LogCases=predict(Spline_3DaysAverage_LogCases,deriv=0))
ValuesSpline_3DaysAverage_LogDeaths<-data.frame(SplineValue_3DaysAverage_LogDeaths=predict(Spline_3DaysAverage_LogDeaths,deriv=0))
CountryDataset_Cases<-data.frame(CountryDataset_Cases,ValuesSpline_3DaysAverageCases) %>%
select(DateReport1,"Spline_3DaysAverageCases"="SplineValue_3DaysAverageCases.y")
CountryDataset_Deaths<-data.frame(CountryDataset_Deaths,ValuesSpline_3DaysAverageDeaths) %>%
select(DateReport1,"Spline_3DaysAverageDeaths"="SplineValue_3DaysAverageDeaths.y")
CountryDataset_logCases<-data.frame(CountryDataset_logCases,ValuesSpline_3DaysAverage_LogCases) %>%
select(DateReport1,"Spline_3DaysAverage_logCases"="SplineValue_3DaysAverage_LogCases.y")
CountryDataset_logDeaths<-data.frame(CountryDataset_logDeaths,ValuesSpline_3DaysAverage_LogDeaths) %>%
select(DateReport1,"Spline_3DaysAverage_logDeaths"="SplineValue_3DaysAverage_LogDeaths.y")
CountryDataset_<-CountryDataset %>%
left_join(CountryDataset_Cases,by='DateReport1') %>%
left_join(CountryDataset_Deaths,by='DateReport1') %>%
left_join(CountryDataset_logCases,by='DateReport1') %>%
left_join(CountryDataset_logDeaths,by='DateReport1')
x <- zoo(CountryDataset_$Spline_3DaysAverage_logCases,CountryDataset_$DateReport1)
x <- na_interpolation(x, option = "linear") %>% fortify.zoo
y <- zoo(CountryDataset_$Spline_3DaysAverage_logDeaths,CountryDataset_$DateReport1)
y <- na_interpolation(y, option = "linear") %>% fortify.zoo
CountryDataset_<-CountryDataset_ %>% left_join(x,by=c('DateReport1'='Index')) %>% rename(Spline_3DaysAverage_logCases_='.')
CountryDataset_<-CountryDataset_ %>% left_join(y,by=c('DateReport1'='Index')) %>% rename(Spline_3DaysAverage_logDeaths_='.')
return(CountryDataset_)
}
CheckAtLeast4Values<-function(){
ListCountriesOkToSpline<-data.frame()
for (ctr in unique(MainDataset$ADM0NAME)){
CountryDataset<-MainDataset %>% filter(ADM0NAME==ctr)
CountryDataset<-CountryDataset %>% filter(NewDeaths!=0)
if ((nrow(CountryDataset)) > 3){
ListCountriesOkToSpline<-c(ctr,ListCountriesOkToSpline)}
}
return(ListCountriesOkToSpline)}
GlobalDataset_<-data.frame()
for (ctr in CheckAtLeast4Values()){
GlobalDataset<-DatasetWithSplineValues(ctr)
GlobalDataset_<-bind_rows(GlobalDataset_,GlobalDataset)
}
maxDate<-min(max(StringencyIndex$Date,na.rm=TRUE),max(MainDataset_$DateReport1,na.rm=TRUE))
minDate<-max(min(StringencyIndex$Date,na.rm=TRUE),min(MainDataset_$DateReport1,na.rm=TRUE))
GlobalDataset_<-GlobalDataset_ %>% filter(DateReport1<=maxDate) %>% filter(DateReport1>=minDate)
write.csv(GlobalDataset_,paste0(folderOutput,'/GlobalDataset.csv'))
runApp('~/GitHub/Shiny_PHSM/app_multiple_SEARO')

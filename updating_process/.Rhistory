stat='identity',position='stack')+theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
scale_fill_manual(breaks=c('Masks','School','Workplace','Gatherings','StayHome','Travels','GlobalIndex'),
labels=c('Masks','Schools', 'Businesses', 'Gatherings', 'Movements', 'Int. Travel','PHSM Severity Index'),values=c('#E57E00','#D0C600','#3C8E05','#A1078B','#0A698A','#AD0C00','#04319D'))+
scale_x_date(breaks = '15 days',labels = date_format("%d/%m/%Y"),limits=c(min=minDate-7,maxDate))+
labs(y='Measure severity',color='Severity scale',fill='')+
scale_y_continuous()+
scale_alpha_continuous(range=c(0,1))+
guides(alpha=FALSE,fill=guide_legend(ncol=2))+
theme_minimal()+
theme(axis.text.x = element_text(size = 16,angle=-45,vjust=0.5, hjust=0),
axis.title.y=element_text(size=18),
axis.text.y=element_blank(),
legend.title=element_blank(),
legend.text=element_text(size=18))+
theme(axis.ticks.x = element_line(size = 0.2, colour = "grey"),
axis.ticks.length = unit(5, "pt"),axis.title.x=element_blank())+
annotate('text',label='PHSM Severity Index',x=minDate+(maxDate-minDate)/2,y=40,color='white',size=6)+
annotate('text',label='Int. Travel',x=minDate+(maxDate-minDate)/2,y=95,color='white',size=6)+
annotate('text',label='Movements',x=minDate+(maxDate-minDate)/2,y=125,color='white',size=6)+
annotate('text',label='Gatherings',x=minDate+(maxDate-minDate)/2,y=155,color='white',size=6)+
annotate('text',label='Businesses',x=minDate+(maxDate-minDate)/2,y=185,color='white',size=6)+
annotate('text',label='Schools',x=minDate+(maxDate-minDate)/2,y=215,color='white',size=6)+
annotate('text',label='Masks',x=minDate+(maxDate-minDate)/2,y=245,color='white',size=6)+
theme(legend.title=element_blank(),legend.box="vertical",legend.position='bottom',legend.key.width = unit(1.5, "cm"),legend.spacing.y = unit(0.5, 'cm'),legend.spacing.x = unit(1, 'cm'))
return(plot_timeline)}
#### 2.6.3 Legend for Severity plot ####
TrickLegend<-ggplot(LegendTimeLine)+
geom_tile(stat='identity',aes(x=x,y=Height,alpha=Alpha,fill=factor(Index,levels=c('Masks',"School",'Workplace','Gatherings','StayHome','Travels',"GlobalIndex"))),position='stack')+
scale_fill_manual(breaks=c('Masks','School','Workplace','Gatherings','StayHome','Travels','GlobalIndex'),
labels=c('Masks','Schools measures', 'Workplace measures', 'Restrictions on gatherings', 'Stay-at-home requirements', 'International travel restrictions','Global Severity Index'),
values=c('#E57E00','#D0C600','#3C8E05','#A1078B','#0A698A','#AD0C00','#04319D'))+
theme_void()+
theme(legend.position="none",plot.title=element_text(hjust=0.5,size=18))+
scale_y_continuous(limits=c(-5,NA))+
scale_x_continuous(limits=c(-100,200))+
annotate("text", x = -10, y = -3, label = "No measures",size=7)+
annotate("text", x = 110, y = -3, label = "Most severe measures",size=7)+
scale_alpha_continuous(range = c(0, 1))+
labs(title='PHSM Severity Index Scale')
#### 2.6.4 Merging of plots (Epi + Severity) ####
#Merges the epi plot and the severity plot in one plot
MixPlot<-function(country){
plots<-plot_grid(plot_casesdeaths_logscale(country)+theme(legend.position='none'),PlotTimeLine_Index(country)+theme(legend.position='none'),align='v',axis='lr',nrow=2,rel_heights = c(7,3))
legends<-plot_grid(get_legend(plot_casesdeaths_logscale(country)),TrickLegend,ncol=2,rel_widths = c(2,8))
plots<-plot_grid(plots,legends,nrow=2,rel_heights = c(9,1))
return(plots)}
#Export the chart for each country of interest
for (ctr in SummaryTable_CountriesInterest$ADM0NAME){
plot<-MixPlot(ctr)+
ggsave(paste0(OutputFolder,"/Charts/",ctr,".png"),width=14,height=16)}
#### 2.7 Subnational data ####
Top3_7DaysIncidence<-function(ctr){
AllregionsPerCountry<-SubnationalDataset %>% filter(CountryName==ctr) %>% select(CountryName,Region,Incidence7day)
Top3_Regions<-AllregionsPerCountry %>% arrange(desc(Incidence7day)) %>% top_n(3)
return(Top3_Regions)
}
NationalAverage<-function(ctr){
NationalAverage_<-(SummaryTable_AllCountries %>% filter(ADM0NAME==ctr))$SvnDaysIncidence_Latest
return(NationalAverage_)
}
###
# #### 2.8 Keymessages per country slide #### - NOT USED ANYMORE
# #Generation of Richard's bullet points
# #First step, function that returns status (according to R or 14days cumulative incidence if R not available)
# GlobalStatus <- function(Country){
#   Trend<-(SummaryTable %>% filter(ADM0NAME==Country))$Trend
#   if (is.na(Trend)){
#     if (!is.na(Change_14Days_Incidence(Country)$Change)){
#       if(Change_14Days_Incidence(Country)$Change > 10){Trend<-"Increasing"}
#       else if(Change_14Days_Incidence(Country)$Change < 10){Trend<-"Decreasing"}
#       else {Trend<-"Stable"}}
#     else if (is.na(Change_14Days_Incidence(Country)$Change)){
#       if(Change_7Days_Incidence(Country)$Change > 10){Trend<-"Increasing"}
#       else if(Change_7Days_Incidence(Country)$Change < 10){Trend<-"Decreasing"}
#       else {Trend<-"Stable"}}
#     }
#   return(Trend)
# }
#
# Bulleting <-function(Country){
#   FirstDate<-min((MainDataset %>% filter(ADM0NAME==Country))$DateReport1)
#   if ((CurrentDate-FirstDate)<28){
#     Bullet1<-paste0(Country," is at the early stages of the outbreak:")
#     Bullet2<-"Continue implementing a blended approach, including detection and isolation of all suspected cases,
#     testing them, contact tracing and quarantining; including NPI"
#     Bullet3<-"Surge capacities to be in place in public health, primary care, hospitals and laboratories"
#   }
#   else if (GlobalStatus(Country)=="Decreasing"){
#     Bullet1<-"Incident rate is decreasing"
#     Bullet2<-"Continue NPI as part of a blended approach"
#     Bullet3<-"Start preparing for national transition using
#     lessons learnt from subnational level providing epidemiological,
#     health-care and public health-care criteria are met"
#   }
#   else if (GlobalStatus(Country)=="Increasing"){
#     Bullet1<-paste0(Country," is still seeing an increasing incidence")
#     Bullet2<-"Continue implementing a blended approach,
#     including detection and isolation of all suspected cases,
#     testing them, contact tracing and quarantining; including NPI"
#     Bullet3<-"Surge capacities to be in place in public health, primary care, hospitals andÂ laboratories"
#   }
#   else if (GlobalStatus(Country)=="Stable"){
#     Bullet1<-"Incident rate is stabilizing"
#     Bullet2<-"Continue NPI as part of a blended approach"
#     Bullet3<-"Start preparing for national transition using lessons
#     learnt from subnational level providing epidemiological, health-care
#     and public health-care criteria are met"
#   }
#   return(list(Bullet1=Bullet1,Bullet2=Bullet2,Bullet3=Bullet3))
# }
#### 2.9 Regional charts ####
#This part is quite long and involves different steps to create the charts needed in slide variations at regional level
par1<-0.5 #smoothing parameter
PHSMKeyDates<-read.csv(paste0(folder,"/ForDailyUpdate/PHSMTableDates.csv")) %>%
select(Country,Date,Measure,Order,Type) %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
mutate(Measure=case_when(Measure=='Domestic Movement Restrictions' ~"Movements",
Measure=='Land Borders'~"Borders",
Measure=='Mass Gathering'~"Mass.gatherings",
Measure=='Non-essential Businesses'~"Businesses",
Measure=='Schools Closure'~"Schools")) %>% filter(!is.na(Measure)) %>%
mutate(Country=if_else(Country=="Russia","Russian Federation",Country)) %>%
mutate(Country=if_else(Country=="Republic of Moldova","Republic Of Moldova",Country)) %>%
mutate(Country=if_else(Country=='Bosnia and Herzegovina','Bosnia And Herzegovina',Country)) %>%
filter(Measure!='State of Emergency')
# PlayingwithPHSMKeyDates to find key date for ANY measure
PHSMKeyDates_<-PHSMKeyDates %>% pivot_wider(names_from=Measure,values_from=Date,names_repair='universal') %>%
mutate(Any=pmin(Movements,Borders,Mass.gatherings,Businesses,Schools,na.rm=TRUE)) %>%
pivot_longer(cols=c("Movements":"Any"),names_to="Measure") %>% rename(Date=value)
#Returns dates related to measure for specific country
DatesByMeasure<-function(ctr,msr){
DateFirstImplementation<-(PHSMKeyDates_ %>% filter(Measure==msr,Country==ctr,Type=='Introduction',Order=='First'))$Date
DateReimplementations<-(PHSMKeyDates_ %>% filter(Measure==msr,Country==ctr,Type=='Introduction',Order!='First'))$Date
DatesLifting<-(PHSMKeyDates_ %>% filter(Measure==msr,Country==ctr,Type=='Lifting'))$Date
return(list(DateFirstImplementation=DateFirstImplementation,DateReimplementations=DateReimplementations,DatesLifting=DatesLifting))
}
#Function that builds new fields in the dataset
#Moving average at each date for cases and deaths
#Log values at each date on moving averages for cases and deaths
BuildNewDataset<-function(ctr){
CountryDataset<-MainDataset %>% filter(ADM0NAME==ctr)
CountryDataset_<-data.frame()
for (date in unique(CountryDataset$DateReport1)){
valueYesterday_Cases<-(CountryDataset %>% filter(DateReport1==date-1))$NewCases
valueToday_Cases<-(CountryDataset %>% filter(DateReport1==date))$NewCases
valueTomorrow_Cases<-(CountryDataset %>% filter(DateReport1==date+1))$NewCases
MovingAverage_Cases<-(valueYesterday_Cases[1]+valueToday_Cases[1]+valueTomorrow_Cases[1])/3
valueYesterday_Deaths<-(CountryDataset %>% filter(DateReport1==date-1))$NewDeaths
valueToday_Deaths<-(CountryDataset %>% filter(DateReport1==date))$NewDeaths
valueTomorrow_Deaths<-(CountryDataset %>% filter(DateReport1==date+1))$NewDeaths
MovingAverage_Deaths<-(valueYesterday_Deaths[1]+valueToday_Deaths[1]+valueTomorrow_Deaths[1])/3
CountryDataset_Atdate<-CountryDataset %>% filter(DateReport1==date)
CountryDataset_Atdate$ThreeDaysAverage_Cases<- MovingAverage_Cases
CountryDataset_Atdate$ThreeDaysAverage_Deaths<- MovingAverage_Deaths
CountryDataset_<-bind_rows(CountryDataset_,CountryDataset_Atdate)
}
CountryDataset_<-CountryDataset_ %>% select(-c("WHO_Code","TotalCases","TotalDeaths","epiWeek")) %>%
mutate(log10_MovingAverage_Cases=log10(ThreeDaysAverage_Cases),
log10_MovingAverage_Deaths=log10(ThreeDaysAverage_Deaths))
return(CountryDataset_)
}
#Function that creates new field (Days) once the reference date (speficic measure) is chosen
ResetZero<-function(ctr,Measure){
ReferenceDate<-DatesByMeasure(ctr,Measure)$DateFirstImplementation
CountryDataset<-BuildNewDataset(ctr) %>% mutate(Days=DateReport1-ReferenceDate) %>%
mutate(Days=as.numeric(Days))
return(CountryDataset)
}
#Prepares the dataset to be smoothened depending on the variable and type of scale
DatasetToSmooth<-function(ctr,CasesOrDeaths,Measure,Log){
CountryDataset<-ResetZero(ctr,Measure)
if(Log=="True"){
if(CasesOrDeaths=="Cases"){
CountryDataset<-CountryDataset %>%
select(ADM0NAME,DateReport1,Days,Variable=log10_MovingAverage_Cases)}
if(CasesOrDeaths=="Deaths"){
CountryDataset<-CountryDataset %>%
select(ADM0NAME,DateReport1,Days,Variable=log10_MovingAverage_Deaths)}}
if(Log=="False"){
if(CasesOrDeaths=="Cases"){
CountryDataset<-CountryDataset %>%
select(ADM0NAME,DateReport1,Days,Variable=ThreeDaysAverage_Cases)}
if(CasesOrDeaths=="Deaths"){
CountryDataset<-CountryDataset %>%
select(ADM0NAME,DateReport1,Days,Variable=ThreeDaysAverage_Deaths)}}
CountryDataset_ <-CountryDataset %>% filter(Variable!=-Inf)
return(CountryDataset_)
}
#Functions calculating spline values
SplineSmooth<-function(ctr,CasesOrDeaths,Measure,par1,Log){
CountryDataset<-DatasetToSmooth(ctr,CasesOrDeaths,Measure,Log) %>% filter(Variable!=-Inf)
SplineFunction<-smooth.spline(x=CountryDataset$Days,y=CountryDataset$Variable,spar=par1)
ValuesSpline<-data.frame(SplineValue=predict(SplineFunction,deriv=0))
CountryDataset<-data.frame(CountryDataset,ValuesSpline) %>% select(-"SplineValue.x","SplineValue"="SplineValue.y")
return(CountryDataset)
}
#Add new column to dataset to spot the date (and so, spline value) of Measure2 (Measure2 means relaxation of measure1)
GlobalCountryDataset<-function(ctr,CasesOrDeaths,Measure,par1,Log){
DatasetToPlot<-DatasetToSmooth(ctr,CasesOrDeaths,Measure,Log) %>%
# left_join((LoessSmooth(ctr,DailyOrMovingAverage,CasesOrDeaths,Measure1,par1,cutDate,Log) %>% select(Days,LoessValue)),by="Days") %>%
left_join((SplineSmooth(ctr,CasesOrDeaths,Measure,par1,Log) %>% select(Days,SplineValue)),by="Days")
DateFirstIntroduction<-DatesByMeasure(ctr,Measure)$DateFirstImplementation
DatesLifting<-DatesByMeasure(ctr,Measure)$DatesLifting
DatesIntroductions<-DateFirstIntroduction<-DatesByMeasure(ctr,Measure)$DateReimplementations
DatasetToPlot<-DatasetToPlot %>% mutate(Reintroduction=if_else(DateReport1 %in% DatesIntroductions,"Yes","No"),
Lifting=if_else(DateReport1 %in% DatesLifting,"Yes","No"))
return(DatasetToPlot)}
DatasetAllCountries<-function(ListCountries,CasesOrDeaths,Measure,par1,Log){
BigDataset<-data.frame()
for (ctry in ListCountries){
CountryDataset<-GlobalCountryDataset(ctry,CasesOrDeaths,Measure,par1,Log)
BigDataset<-bind_rows(CountryDataset,BigDataset)
}
return(BigDataset)
}
# NPIPlot<-function(ListCountries,CasesOrDeaths,Measure,par1,cutDate,Log,RealValues){
#
#   ttl <-case_when(CasesOrDeaths=="Cases" & Log =='True' ~"Daily cases",
#                   CasesOrDeaths=="Cases" & Log =='False' ~"Number of daily COVID-19 Cases",
#                   CasesOrDeaths=='Deaths'& Log =='False'~"Number of daily COVID-19 Deaths",
#                   CasesOrDeaths=='Deaths'& Log =='True'~"Number of daily COVID-19 Deaths (log scale)")
#
#   BigDataset<-DatasetAllCountries(ListCountries,CasesOrDeaths,Measure,par1,Log)
#
#   BigDataset<-BigDataset %>% pivot_longer(cols=c("Variable","SplineValue")) %>%
#     mutate(name = replace(name, name == 'SplineValue', 'Spline approach')) %>%
#     filter(DateReport1<=cutDate)
#
#   BigDataset_Smooth <- BigDataset %>% filter(name == 'Spline approach')
#
#   BigDataset_Values<-BigDataset %>% filter(name == "Variable")
#
#   BigDataset_Reintroduction<- BigDataset_Smooth %>% filter(Reintroduction=="Yes")
#   BigDataset_Lifting<-BigDataset_Smooth %>% filter(Lifting=="Yes")
#
#
#   plot<-ggplot(BigDataset_Smooth)+
#     labs(y=ttl,linetype="Smoothing Approach")+
#     geom_vline(xintercept = 0,linetype="dashed",show.legend = TRUE)+
#     geom_line(aes(x=Days,y=value,group=ADM0NAME,color='First implementation of the \nmeasure at national level'),linetype=2,size=0.75,show.legend=TRUE)+
#     geom_line(aes(x=Days,y=value,group=ADM0NAME,color=ADM0NAME),linetype=1,size=0.75)+
#     scale_x_continuous(breaks=seq(-50,150,50))+theme(legend.title=element_blank(),axis.title.x =element_blank(),legend.text=element_text(size=16))#
#
#   if(Log=="True"){
#     plot<-plot+scale_y_continuous(labels=function(x) round(10^x))}
#
#   if(RealValues=="Yes")
#   {plot<-plot+geom_point(data=BigDataset_Values,aes(x=Days,y=value,color=ADM0NAME),shape=3,alpha=0.5,size=1)}
#
#   if(nrow(BigDataset_Lifting)!=0 & nrow(BigDataset_Reintroduction)==0){
#     plot<-plot+
#       geom_point(data=BigDataset_Lifting,aes(x=Days,y=value,group=ADM0NAME,color="Relaxation of the measure \nat national level"),shape=25,fill='white',size=4,stroke=1,show.legend=TRUE)+
#       #geom_point(data=BigDataset_Lifting,aes(x=Days,y=value,group=ADM0NAME,color=ADM0NAME),shape=21,fill="white",size=5,stroke=1,show.legend=FALSE)+
#       geom_point(data=BigDataset_Lifting,aes(x=Days,y=value,group=ADM0NAME,color=ADM0NAME),shape=25,stroke=1,size=4,show.legend=FALSE)+
#       scale_color_manual(breaks=c(ListCountries,'First implementation of the \nmeasure at national level',"Relaxation of the measure \nat national level"),values=c(MyPalette[1:length(ListCountries)],"black",'black'),guide="legend")+
#       guides(colour=guide_legend(override.aes=list(
#         linetype = c(rep("solid",length(ListCountries)),'dashed','blank'),
#         shape=c(rep(NA,length(ListCountries)),NA,25),
#         size=c(rep(1,length(ListCountries)),0.5,2))))
#   }
#
#   if(nrow(BigDataset_Lifting)==0 & nrow(BigDataset_Reintroduction)==0){
#     plot<-plot+scale_color_manual(breaks=c(ListCountries,'First implementation of the \nmeasure at national level'),values=c(MyPalette[1:length(ListCountries)],"black"),guide="legend")+
#       guides(colour=guide_legend(override.aes=list(
#         linetype = c(rep(length(ListCountries)),'dashed'),
#         shape =c(rep(NA,length(ListCountries)),NA),
#         size=c(rep(1,length(ListCountries)),0.5))))
#   }
#
#
#   if(nrow(BigDataset_Lifting)!=0 & nrow(BigDataset_Reintroduction)!=0){
#     plot<-plot+
#       geom_point(data=BigDataset_Lifting,aes(x=Days,y=value,group=ADM0NAME,color="Relaxation of the measure \nat national level"),shape=25,fill="white",size=4,stroke=1,show.legend=TRUE)+
#       geom_point(data=BigDataset_Lifting,aes(x=Days,y=value,group=ADM0NAME,color=ADM0NAME),shape=25,stroke=1,size=4,show.legend=FALSE)+
#       geom_point(data=BigDataset_Reintroduction,aes(x=Days,y=value,group=ADM0NAME,color="Reintroduction of the \nmeasure at national level"),shape=24,fill="white",size=4,stroke=1,show.legend=TRUE)+
#       geom_point(data=BigDataset_Reintroduction,aes(x=Days,y=value,group=ADM0NAME,color=ADM0NAME),shape=24,stroke=1,size=4,show.legend=FALSE)+
#       scale_color_manual(breaks=c(ListCountries,'First implementation of the \nmeasure at national level',"Relaxation of the measure \nat national level","Reintroduction of the \nmeasure at national level"),values=c(MyPalette[1:length(ListCountries)],"black","black","black"),guide="legend")+
#       guides(colour=guide_legend(override.aes=list(
#         linetype = c(rep("solid",length(ListCountries)),'dashed',"blank","blank"),
#         shape=c(rep(NA,length(ListCountries)),NA,25,24),
#         size=c(rep(1,length(ListCountries)),0.5,2,2))))
#   }
#
#   return(plot)
# }
#Simplified NPI Plot (Keep only date of first implementation, not relaxatiom, second reintroduction,...)
NPIPlot<-function(ListCountries,CasesOrDeaths,Measure,par1,cutDate,Log,RealValues){
ttl <-case_when(CasesOrDeaths=="Cases" & Log =='True' ~"Daily cases",
CasesOrDeaths=="Cases" & Log =='False' ~"Number of daily COVID-19 Cases",
CasesOrDeaths=='Deaths'& Log =='False'~"Number of daily COVID-19 Deaths",
CasesOrDeaths=='Deaths'& Log =='True'~"Number of daily COVID-19 Deaths (log scale)")
BigDataset<-DatasetAllCountries(ListCountries,CasesOrDeaths,Measure,par1,Log)
BigDataset<-BigDataset %>% pivot_longer(cols=c("Variable","SplineValue")) %>%
mutate(name = replace(name, name == 'SplineValue', 'Spline approach')) %>%
filter(DateReport1<=cutDate)
BigDataset_Smooth <- BigDataset %>% filter(name == 'Spline approach')
BigDataset_Values<-BigDataset %>% filter(name == "Variable")
BigDataset_Reintroduction<- BigDataset_Smooth %>% filter(Reintroduction=="Yes")
BigDataset_Lifting<-BigDataset_Smooth %>% filter(Lifting=="Yes")
plot<-ggplot(BigDataset_Smooth)+
labs(y=ttl,linetype="Smoothing Approach")+
geom_vline(xintercept = 0,linetype="dashed",show.legend = TRUE)+
geom_line(aes(x=Days,y=value,group=ADM0NAME,color='First implementation of the \nmeasure at national level'),linetype=2,size=0.75,show.legend=TRUE)+
geom_line(aes(x=Days,y=value,group=ADM0NAME,color=ADM0NAME),linetype=1,size=0.75)+
scale_x_continuous(breaks=seq(-50,150,50))+theme(legend.title=element_blank(),axis.title.x =element_blank(),legend.text=element_text(size=16))+
scale_color_manual(breaks=c(ListCountries,'First implementation of the \nmeasure at national level'),values=c(MyPalette[1:length(ListCountries)],"black"),guide="legend")+
guides(colour=guide_legend(override.aes=list(
linetype=c(rep('solid',length(ListCountries)),'dashed'))))
if(Log=="True"){
plot<-plot+scale_y_continuous(labels=function(x) round(10^x))}
if(RealValues=="Yes")
{plot<-plot+geom_point(data=BigDataset_Values,aes(x=Days,y=value,color=ADM0NAME),shape=3,alpha=0.5,size=1)}
return(plot)
}
ListCountries_1<-(CountriesPerRegion %>% filter(Region==1))$ADM0NAME
ListCountries_2<-(CountriesPerRegion %>% filter(Region==2))$ADM0NAME
ListCountries_3<-(CountriesPerRegion %>% filter(Region==3))$ADM0NAME
ListCountries_4<-(CountriesPerRegion %>% filter(Region==4))$ADM0NAME
ListCountries_5<-(CountriesPerRegion %>% filter(Region==5))$ADM0NAME
ListCountries_6<-(CountriesPerRegion %>% filter(Region==6))$ADM0NAME
ListCountries_7<-(CountriesPerRegion %>% filter(Region==7))$ADM0NAME
ListCountries_8<-(CountriesPerRegion %>% filter(Region==8))$ADM0NAME
ListCountries_9<-(CountriesPerRegion %>% filter(Region==9))$ADM0NAME
plot1<-NPIPlot(ListCountries_1,'Cases','Any',0.5,CurrentDate,'True','No')
plot2<-NPIPlot(ListCountries_2,'Cases','Any',0.5,CurrentDate,'True','No')
plot3<-NPIPlot(ListCountries_3,'Cases','Any',0.5,CurrentDate,'True','No')
plot4<-NPIPlot(ListCountries_4,'Cases','Any',0.5,CurrentDate,'True','No')
plot5<-NPIPlot(ListCountries_5,'Cases','Any',0.5,CurrentDate,'True','No')
plot6<-NPIPlot(ListCountries_6,'Cases','Any',0.5,CurrentDate,'True','No')
plot7<-NPIPlot(ListCountries_7,'Cases','Any',0.5,CurrentDate,'True','No')
plot8<-NPIPlot(ListCountries_8,'Cases','Any',0.5,CurrentDate,'True','No')
plot9<-NPIPlot(ListCountries_9,'Cases','Any',0.5,CurrentDate,'True','No')
PlotsNPI<-plot_grid(plot1,plot2,plot3,plot4,plot5,plot6,plot7,plot8,plot9,ncol=3,nrow=3)
#### 3 - Generates slide deck ####
render(paste0(folder_,"\\Powerpoint_Creation.Rmd"),output_file=paste0(OutputFolder,"/SlideDeck/","Presentation_",CurrentDate),powerpoint_presentation(reference_doc= "Template.pptx"))
PlotsNPI<-plot_grid(plot1,plot2,plot3,plot4,plot5,plot6,plot7,plot8,plot9,ncol=3,nrow=3)
plot1<-NPIPlot(ListCountries_1,'Cases','Any',0.5,CurrentDate,'True','No')
plot2<-NPIPlot(ListCountries_2,'Cases','Any',0.5,CurrentDate,'True','No')
plot3<-NPIPlot(ListCountries_3,'Cases','Any',0.5,CurrentDate,'True','No')
plot4<-NPIPlot(ListCountries_4,'Cases','Any',0.5,CurrentDate,'True','No')
plot5<-NPIPlot(ListCountries_5,'Cases','Any',0.5,CurrentDate,'True','No')
plot6<-NPIPlot(ListCountries_6,'Cases','Any',0.5,CurrentDate,'True','No')
plot7<-NPIPlot(ListCountries_7,'Cases','Any',0.5,CurrentDate,'True','No')
plot8<-NPIPlot(ListCountries_8,'Cases','Any',0.5,CurrentDate,'True','No')
plot9<-NPIPlot(ListCountries_9,'Cases','Any',0.5,CurrentDate,'True','No')
plot1
PlotsNPI<-plot_grid(plot1,plot2,plot3,plot4,plot5,plot6,plot7,plot8,plot9,ncol=3,nrow=3)
render(paste0(folder_,"\\Powerpoint_Creation.Rmd"),output_file=paste0(OutputFolder,"/SlideDeck/","Presentation_",CurrentDate),powerpoint_presentation(reference_doc= "Template.pptx"))
PHSMNarratives<-read_excel(paste0(folder,"/ForDailyUpdate/PHSM_Narratives.xlsx"))
KeyMessages<-read_excel(paste0(folder,"/ForDailyUpdate/KeyMessages.xlsx"))
render(paste0(folder_,"\\Powerpoint_Creation.Rmd"),output_file=paste0(OutputFolder,"/SlideDeck/","Presentation_",CurrentDate),powerpoint_presentation(reference_doc= "Template.pptx"))
KeyMessages<-read_excel(paste0(folder,"/ForDailyUpdate/KeyMessages.xlsx"))
render(paste0(folder_,"\\Powerpoint_Creation.Rmd"),output_file=paste0(OutputFolder,"/SlideDeck/","Presentation_",CurrentDate),powerpoint_presentation(reference_doc= "Template.pptx"))
PHSMNarratives<-read_excel(paste0(folder,"/ForDailyUpdate/PHSM_Narratives.xlsx"))
KeyMessages<-read_excel(paste0(folder,"/ForDailyUpdate/KeyMessages.xlsx"))
render(paste0(folder_,"\\Powerpoint_Creation.Rmd"),output_file=paste0(OutputFolder,"/SlideDeck/","Presentation_",CurrentDate),powerpoint_presentation(reference_doc= "Template.pptx"))
PackagesToInstall<-c('imputeTS','zoo',"hablar","ggsci",'BBmisc',"stringr","magick","gridExtra","lubridate","readxl","RColorBrewer","ggplot2","dplyr","rmarkdown","kableExtra","flextable","ggpubr","knitr","scales","tidyr","scales","xml2","rvest","qdapRegex",'cowplot')
for (i in PackagesToInstall) {
print(i)
if (!i %in% installed.packages())
{install.packages(i)}
library(i, character.only = TRUE)
}
folder_<-dirname(rstudioapi::getSourceEditorContext()$path)
folderRawData<-paste0(folder_,'/rawdata_to_update')
folderCleanData<-paste0(folder_,'/cleandata_to_update')
folderApp_Single<-paste0(dirname(folder_),'/app_single')
folderApp_Multiple<-paste0(dirname(folder_),'/app_multiple')
StringencyIndex<-read.csv(paste0(folderCleanData,'/StringencyIndex.csv'))
StringencyIndex<-StringencyIndex %>% rename(Schools=School,Businesses=Workplace,Movements=StayHome,Borders=Travels) %>%
mutate(Date=as.Date(Date)) %>% mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME)) %>%
arrange(ADM0NAME)
KeyDates_SeverityIndex<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Severity Index') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_All) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Schools<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Schools') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Schools) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Masks<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Masks') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Masks) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Businesses<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Businesses') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Businesses) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Movements<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Movements') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Movements)
KeyDates_Borders<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Borders') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy")))) %>%
select(Date,ADM0NAME,Narrative_Borders) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
KeyDates_Gatherings<-read_excel(paste0(folderCleanData,'/KeyDates.xlsx'),sheet='Gatherings') %>%
mutate(Date=as.Date(parse_date_time(Date,c("dmy", "ymd","mdy"))))%>%
select(Date,ADM0NAME,Narrative_Gatherings) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Republic of Moldova','Republic Of Moldova',ADM0NAME),
ADM0NAME=if_else(ADM0NAME=='Bosnia and Herzegovina','Bosnia And Herzegovina',ADM0NAME))
MainDataset<-read.csv(paste0(folderCleanData,"/qry_covid_running_cases_country_date.CSV")) %>%
mutate(ADM0NAME=str_to_title(ADM0NAME),
DateReport1=as.Date(parse_date_time(DateReport1,c("dmy", "ymd","mdy")))) %>%
mutate(ADM0NAME=if_else(ADM0NAME=='Kosovo','Kosovo(1)',ADM0NAME))
MainDataset<-MainDataset %>%
merge(StringencyIndex,by.x=c('DateReport1','ADM0NAME'),by.y=c('Date','ADM0NAME'),all=TRUE) %>%
filter(!is.na(DateReport1)) %>%
filter(ADM0NAME %in% unique(StringencyIndex$ADM0NAME)) %>%
mutate(NewCases = replace_na(NewCases, 0),
NewDeaths = replace_na(NewDeaths, 0),
TotalCases = replace_na(TotalCases, 0),
TotalDeaths = replace_na(TotalDeaths, 0)) %>%
#left_join(StringencyIndex,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_SeverityIndex,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Masks,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Schools,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Businesses,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Borders,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Gatherings,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date")) %>%
left_join(KeyDates_Movements,by=c("ADM0NAME" = "ADM0NAME", "DateReport1" = "Date"))
RelativeDays<-function(ctr){
DatasetCountry<-MainDataset %>% filter(ADM0NAME==ctr)
minDateAll<-min((DatasetCountry %>% filter(!is.na(Narrative_All)))$DateReport1)
minDateSchools<-min((DatasetCountry %>% filter(!is.na(Narrative_Schools)))$DateReport1)
minDateMasks<-min((DatasetCountry %>% filter(!is.na(Narrative_Masks)))$DateReport1)
minDateGatherings<-min((DatasetCountry %>% filter(!is.na(Narrative_Gatherings)))$DateReport1)
minDateBusinesses<-min((DatasetCountry %>% filter(!is.na(Narrative_Businesses)))$DateReport1)
minDateBorders<-min((DatasetCountry %>% filter(!is.na(Narrative_Borders)))$DateReport1)
minDateMovements<-min((DatasetCountry %>% filter(!is.na(Narrative_Movements)))$DateReport1)
DatasetCountry<-DatasetCountry %>% mutate(Days_All=DateReport1-minDateAll) %>%
mutate(Days_Schools=as.numeric(DateReport1-minDateSchools)) %>%
mutate(Days_Masks=as.numeric(DateReport1-minDateMasks)) %>%
mutate(Days_Gatherings=as.numeric(DateReport1-minDateGatherings)) %>%
mutate(Days_Movements=as.numeric(DateReport1-minDateMovements)) %>%
mutate(Days_Borders=as.numeric(DateReport1-minDateBorders)) %>%
mutate(Days_Businesses=as.numeric(DateReport1-minDateBusinesses))
return(DatasetCountry)
}
BuildNewDataset<-function(ctr){
CountryDataset<-RelativeDays(ctr)
CountryDataset<-CountryDataset %>%
mutate(ThreeDaysAverage_Cases=(NewCases+lag(NewCases,1)+lead(NewCases,1))/3,
ThreeDaysAverage_Deaths=(NewDeaths+lag(NewDeaths,1)+lead(NewDeaths,1))/3)
CountryDataset_<-CountryDataset %>% select(-c("WHO_Code","TotalCases","TotalDeaths","epiWeek")) %>%
mutate(log10_MovingAverage_Cases=log10(ThreeDaysAverage_Cases),
log10_MovingAverage_Deaths=log10(ThreeDaysAverage_Deaths))
return(CountryDataset_)
}
DatasetToSmooth<-function(ctr){
CountryDataset<-BuildNewDataset(ctr)
CountryDataset<-CountryDataset %>% mutate(log_cases=log10(NewCases),log_deaths=log10(NewDeaths))
return(CountryDataset)}
DatasetWithSplineValues<-function(ctr){
CountryDataset<-DatasetToSmooth(ctr)
CountryDataset_Cases<-DatasetToSmooth(ctr) %>% filter(!is.na(ThreeDaysAverage_Cases)) %>% select(DateReport1,ThreeDaysAverage_Cases)
CountryDataset_Deaths<-DatasetToSmooth(ctr) %>% filter(!is.na(ThreeDaysAverage_Deaths)) %>% select(DateReport1,ThreeDaysAverage_Deaths)
CountryDataset_logCases<-DatasetToSmooth(ctr) %>% filter(!is.na(log10_MovingAverage_Cases)) %>%
select(DateReport1,log10_MovingAverage_Cases) %>% filter(log10_MovingAverage_Cases!=-Inf)
CountryDataset_logDeaths<-DatasetToSmooth(ctr) %>% filter(!is.na(log10_MovingAverage_Deaths)) %>%
select(DateReport1,log10_MovingAverage_Deaths) %>% filter(log10_MovingAverage_Deaths!=-Inf)
Spline_3DaysAverageCases<-smooth.spline(x=CountryDataset_Cases$DateReport1,y=CountryDataset_Cases$ThreeDaysAverage_Cases,spar=0.5)
Spline_3DaysAverageDeaths<-smooth.spline(x=CountryDataset_Deaths$DateReport1,y=CountryDataset_Deaths$ThreeDaysAverage_Deaths,spar=0.5)
Spline_3DaysAverage_LogCases<-smooth.spline(x=CountryDataset_logCases$DateReport1,y=CountryDataset_logCases$log10_MovingAverage_Cases,spar=0.5)
Spline_3DaysAverage_LogDeaths<-smooth.spline(x=CountryDataset_logDeaths$DateReport1,y=CountryDataset_logDeaths$log10_MovingAverage_Deaths,spar=0.5)
ValuesSpline_3DaysAverageCases<-data.frame(SplineValue_3DaysAverageCases=predict(Spline_3DaysAverageCases,deriv=0))
ValuesSpline_3DaysAverageDeaths<-data.frame(SplineValue_3DaysAverageDeaths=predict(Spline_3DaysAverageDeaths,deriv=0))
ValuesSpline_3DaysAverage_LogCases<-data.frame(SplineValue_3DaysAverage_LogCases=predict(Spline_3DaysAverage_LogCases,deriv=0))
ValuesSpline_3DaysAverage_LogDeaths<-data.frame(SplineValue_3DaysAverage_LogDeaths=predict(Spline_3DaysAverage_LogDeaths,deriv=0))
CountryDataset_Cases<-data.frame(CountryDataset_Cases,ValuesSpline_3DaysAverageCases) %>%
select(DateReport1,"Spline_3DaysAverageCases"="SplineValue_3DaysAverageCases.y")
CountryDataset_Deaths<-data.frame(CountryDataset_Deaths,ValuesSpline_3DaysAverageDeaths) %>%
select(DateReport1,"Spline_3DaysAverageDeaths"="SplineValue_3DaysAverageDeaths.y")
CountryDataset_logCases<-data.frame(CountryDataset_logCases,ValuesSpline_3DaysAverage_LogCases) %>%
select(DateReport1,"Spline_3DaysAverage_logCases"="SplineValue_3DaysAverage_LogCases.y")
CountryDataset_logDeaths<-data.frame(CountryDataset_logDeaths,ValuesSpline_3DaysAverage_LogDeaths) %>%
select(DateReport1,"Spline_3DaysAverage_logDeaths"="SplineValue_3DaysAverage_LogDeaths.y")
CountryDataset_<-CountryDataset %>%
left_join(CountryDataset_Cases,by='DateReport1') %>%
left_join(CountryDataset_Deaths,by='DateReport1') %>%
left_join(CountryDataset_logCases,by='DateReport1') %>%
left_join(CountryDataset_logDeaths,by='DateReport1')
x <- zoo(CountryDataset_$Spline_3DaysAverage_logCases,CountryDataset_$DateReport1)
x <- na_interpolation(x, option = "linear") %>% fortify.zoo
y <- zoo(CountryDataset_$Spline_3DaysAverage_logDeaths,CountryDataset_$DateReport1)
y <- na_interpolation(y, option = "linear") %>% fortify.zoo
CountryDataset_<-CountryDataset_ %>% left_join(x,by=c('DateReport1'='Index')) %>% rename(Spline_3DaysAverage_logCases_='.')
CountryDataset_<-CountryDataset_ %>% left_join(y,by=c('DateReport1'='Index')) %>% rename(Spline_3DaysAverage_logDeaths_='.')
return(CountryDataset_)
}
CheckAtLeast4Values<-function(){
ListCountriesOkToSpline<-data.frame()
for (ctr in unique(MainDataset$ADM0NAME)){
CountryDataset<-MainDataset %>% filter(ADM0NAME==ctr)
CountryDataset<-CountryDataset %>% filter(NewDeaths!=0)
if ((nrow(CountryDataset)) > 3){
ListCountriesOkToSpline<-c(ctr,ListCountriesOkToSpline)}
}
return(ListCountriesOkToSpline)}
GlobalDataset_<-data.frame()
for (ctr in CheckAtLeast4Values()){
GlobalDataset<-DatasetWithSplineValues(ctr)
GlobalDataset_<-bind_rows(GlobalDataset_,GlobalDataset)
}
write.csv(GlobalDataset_,paste0(folderCleanData,'/GlobalDataset.csv'))
shiny::runApp('~/GitHub/HIM/Shiny_PHSM/app_single')
